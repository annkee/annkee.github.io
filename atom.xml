<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>annkee</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/annkee/"/>
  <updated>2019-07-15T02:35:35.903Z</updated>
  <id>https://github.com/annkee/</id>
  
  <author>
    <name>annkee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用软件安装</title>
    <link href="https://github.com/annkee/2019/07/08/software/"/>
    <id>https://github.com/annkee/2019/07/08/software/</id>
    <published>2019-07-07T16:00:00.000Z</published>
    <updated>2019-07-15T02:35:35.903Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/software.jpg" alt="软件备忘" style="width: 100%"></p><a id="more"></a><p><span id="inline-toc">1</span> Acrobat Reader DC(强大的pdf阅读器)<br>下载地址：<a href="https://acrobat.adobe.com/us/en/acrobat/pdf-reader.html?promoid=C4SZ2XDR&amp;mv=other" target="_blank" rel="noopener">https://acrobat.adobe.com/us/en/acrobat/pdf-reader.html?promoid=C4SZ2XDR&amp;mv=other</a></p><p><span id="inline-toc">2</span> sublime text(文本编辑器)<br>下载地址：<a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">http://www.sublimetext.com/3</a><br>支持windows和Linux版本。<br>常用快捷键：</p><ul><li>CTRL+h: 替换字符，在每行末尾添加字符，选择正则匹配*号，输入$，代表末尾，输入^代表行首，输入\s+$ 删除空白空格和空行</li></ul><p><span id="inline-toc">3</span> shutters百叶窗(资源管理器，并行多个资源管理器)<br>下载地址：<a href="http://shutters.160.com" target="_blank" rel="noopener">http://shutters.160.com</a></p><p><img src="https://blog.annkee.top/images/1000280903.png" alt="多任务资源管理" style="width: 100%"><br>下载地址：<a href="https://q-dir.en.softonic.com" target="_blank" rel="noopener">https://q-dir.en.softonic.com</a></p><p><span id="inline-toc">4</span> gif-LICEcap(gif录制工具)<br>下载地址：<a href="https://www.cockos.com/licecap" target="_blank" rel="noopener">https://www.cockos.com/licecap</a></p><p><span id="inline-toc">5</span> 十个免费的图片获取网站<br>下载地址：<a href="http://www.sohu.com/a/239357937_714589" target="_blank" rel="noopener">http://www.sohu.com/a/239357937_714589</a></p><p><span id="inline-toc">6</span> teamviewer 远程控制协作工具<br>下载地址：<a href="https://www.teamviewer.cn/cn" target="_blank" rel="noopener">https://www.teamviewer.cn/cn</a></p><p><span id="inline-toc">7</span> postman api调用测试工具<br>下载地址：<a href="https://www.getpostman.com/downloads" target="_blank" rel="noopener">https://www.getpostman.com/downloads</a></p><p><span id="inline-toc">8</span> jmeter 测试工具</p><p>下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/source" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/source</a></p><p><span id="inline-toc">9</span> foxmail 邮件工具<br>下载地址：<a href="https://www.foxmail.com" target="_blank" rel="noopener">https://www.foxmail.com</a></p><p><span id="inline-toc">10</span> PowerDesigner 建模工具<br>下载地址：<a href="http://www.onlinedown.net/soft/577763.htm" target="_blank" rel="noopener">http://www.onlinedown.net/soft/577763.htm</a></p><p><span id="inline-toc">11</span> windows版本的git工具<br>下载地址：<a href="https://gitforwindows.org" target="_blank" rel="noopener">https://gitforwindows.org</a></p><p><span id="inline-toc">12</span> SQLyog Ultimate V13.1.1 MySQL客户端工具破解版<br>下载地址：<a href="https://www.jb51.net/database/645936.html" target="_blank" rel="noopener">https://www.jb51.net/database/645936.html</a></p><p><span id="inline-toc">13</span> 冰点文库下载器<br>下载地址：<a href="http://www.bingdian001.com/?p=30" target="_blank" rel="noopener">http://www.bingdian001.com/?p=30</a></p><p><span id="inline-toc">13</span> 录屏和色素提取工具<br>下载地址：<a href="https://faststone-capture.en.softonic.com" target="_blank" rel="noopener">https://faststone-capture.en.softonic.com</a></p><p><span id="inline-toc">14</span> winrar解压缩工具破解版<br>下载地址：<a href="https://www.win-rar.com/fileadmin/winrar-versions/sc20190304/wrr/winrar-x64-570sc.exe" target="_blank" rel="noopener">https://www.win-rar.com/fileadmin/winrar-versions/sc20190304/wrr/winrar-x64-570sc.exe</a></p>]]></content>
    
    <summary type="html">
    
      公司常用软件安装教程，备忘。
    
    </summary>
    
      <category term="others" scheme="https://github.com/annkee/categories/others/"/>
    
    
      <category term="others" scheme="https://github.com/annkee/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>RPC框架-Dubbo</title>
    <link href="https://github.com/annkee/2019/05/29/RPC%E6%A1%86%E6%9E%B6-Dubbo/"/>
    <id>https://github.com/annkee/2019/05/29/RPC框架-Dubbo/</id>
    <published>2019-05-28T16:00:00.000Z</published>
    <updated>2019-07-08T10:38:21.676Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/dubbo-architecture.png" alt="RPC远程过程调用" style="width: 100%"><br><a id="more"></a></p><h1 id="官方描述"><a href="#官方描述" class="headerlink" title="官方描述"></a>官方描述</h1><p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><h1 id="自我描述：-dubbo是一个分布式的服务框架，用于分布式开发，就是服务调用，有很大的解耦性，实现方式就是把整个业务细颗粒拆分多个子模块，每个模块间通过dubbo相互调用实现。"><a href="#自我描述：-dubbo是一个分布式的服务框架，用于分布式开发，就是服务调用，有很大的解耦性，实现方式就是把整个业务细颗粒拆分多个子模块，每个模块间通过dubbo相互调用实现。" class="headerlink" title="自我描述： dubbo是一个分布式的服务框架，用于分布式开发，就是服务调用，有很大的解耦性，实现方式就是把整个业务细颗粒拆分多个子模块，每个模块间通过dubbo相互调用实现。"></a>自我描述： dubbo是一个分布式的服务框架，用于分布式开发，就是服务调用，有很大的解耦性，实现方式就是把整个业务细颗粒拆分多个子模块，每个模块间通过dubbo相互调用实现。</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>面向接口代理的高性能RPC调用：<br>  提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。</li><li>智能负载均衡：<br>  内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。</li><li>服务自动注册与发现：<br>  支持多种注册中心服务，服务实例上下线实时感知。</li><li>高度可扩展能力：<br>  遵循微内核+插件的设计原则，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现。</li><li>运行期流量调度：<br>  内置条件、脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能。</li><li>可视化的服务治理与运维：<br>  遵循微内核+提供丰富服务治理、运维工具：随时查询服务元数据、服务健康状态及调用统计，实时下发路由策略、调整配置参数。</li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/dubbo-architecture.png&quot; alt=&quot;RPC远程过程调用&quot; style=&quot;width: 100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="RPC框架" scheme="https://github.com/annkee/categories/RPC%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="RPC" scheme="https://github.com/annkee/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发（一）</title>
    <link href="https://github.com/annkee/2019/04/12/miniprogram/"/>
    <id>https://github.com/annkee/2019/04/12/miniprogram/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-07-08T10:38:07.289Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/miniprogram.jpg" alt="👍" style="width: 100%"><br><a id="more"></a></p><h1 id="小程序官方文档介绍"><a href="#小程序官方文档介绍" class="headerlink" title="小程序官方文档介绍"></a>小程序官方文档介绍</h1><p>首先附上文档：<a href="https://developers.weixin.qq.com/miniprogram/introduction/index.html?t=19041222" target="_blank" rel="noopener">小程序官方文档介绍</a></p><p>可以说，现在每款智能手机上都装有一款微信软件，这款产品里面有各种功能，而微信也早已成为了一个生态。小程序其实就是基于微信平台的一款自封装的软件应用快速开发，扩展的一款东西。<br>正如文档所说：微信小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。<br>2017年1月9日，张小龙在2017微信公开课Pro上发布的小程序正式上线。经过将近两年的发展，小程序已经构造了自己的一套开发环境和开发者生态。<br>小程序的开发内容也更是涵盖了许多的行业：房地产、内容咨询、新闻发布、科技创新、母婴家居、外卖物流、保险金融等各行各业。而小程序的开发也需要一定的技术功底。<br>当然开发之前肯定是要注册一个小程序账号，小程序开放了个人和企业注册，方便了个人进行开发测试。<br>不过，对于个人的开发有个比较大的坑，那就是小程序的云存储的权限问题：<br><img src="https://blog.majunxiang.wang/images/存储权限.png" alt="小程序存储权限" style="width: 80%"><br>也就是说除创建者和管理员外，其他所有用户只有可读权限，并不能编辑他们自己的用户信息。不过可以使用<code>wx.setStorage(Object object)</code>来存储数据到本地，<br>将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。数据存储生命周期跟小程序本身一致，即除用户主动删除或超过一定时间被自动清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。<br>当然，如果有自己的服务器，还是存在服务器数据库中最好。</p><p><img src="https://blog.majunxiang.wang/images/srorageapi.png" alt="存储API" style="width: 80%"></p><p>好了，关于小程序就先说到这里。</p>]]></content>
    
    <summary type="html">
    
      微信小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sublime text 3安装格式化json的插件</title>
    <link href="https://github.com/annkee/2018/11/06/sublime-text3/"/>
    <id>https://github.com/annkee/2018/11/06/sublime-text3/</id>
    <published>2018-11-05T16:00:00.000Z</published>
    <updated>2019-07-08T10:38:36.408Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/beach-2178625_960_720.jpg" alt="👍" style="width: 100%"><br><a id="more"></a><br>sublime text 安装json格式化插件</p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>打开sublime text ,输入快捷键CTRL+`<br>在下面输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/5841000-7c063dddac060eb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台"></p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>稍等几秒，等结束，然后用快捷键CTRL+shift+p，输入install package,选择第一个，<img src="https://upload-images.jianshu.io/upload_images/5841000-e26801e4b2a555c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择进入插件安装"></p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><p>等几秒，出现弹出框，在弹出框输入要安装的插件，等待安装完成。CTRL+alt+j格式化json<br><img src="https://upload-images.jianshu.io/upload_images/5841000-65c081aa6e514b05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入插件名字"></p>]]></content>
    
    <summary type="html">
    
      sublime text 3安装格式化json的插件
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github解决矛盾</title>
    <link href="https://github.com/annkee/2018/11/05/github%E8%A7%A3%E5%86%B3%E7%9F%9B%E7%9B%BE/"/>
    <id>https://github.com/annkee/2018/11/05/github解决矛盾/</id>
    <published>2018-11-04T16:00:00.000Z</published>
    <updated>2019-07-08T10:37:16.322Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/stones-167089_960_720.jpg" alt="github" style="width: 100%"></p><a id="more"></a><p>当从远程项目git clone 下来项目之后，然后进行二次开发，需要将代码提交到远程，处理流程：</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>git<br>下载链接：<a href="https://github.com/git-for-windows/git/releases/download/v2.19.1.windows.1/Git-2.19.1-64-bit.exe">git for windows</a></p><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><h3 id="1-在项目目录打开gitbash"><a href="#1-在项目目录打开gitbash" class="headerlink" title="1.在项目目录打开gitbash"></a>1.在项目目录打开gitbash</h3><h3 id="2-输入git-status查看状态"><a href="#2-输入git-status查看状态" class="headerlink" title="2.输入git status查看状态"></a>2.输入git status查看状态</h3><h3 id="3-输入git-add将modified的文件需要提交的进行添加"><a href="#3-输入git-add将modified的文件需要提交的进行添加" class="headerlink" title="3.输入git add将modified的文件需要提交的进行添加"></a>3.输入git add将modified的文件需要提交的进行添加</h3><h3 id="4-git-commit-m-“description”"><a href="#4-git-commit-m-“description”" class="headerlink" title="4.git commit -m “description”"></a>4.git commit -m “description”</h3><h3 id="5-git-fetch-origin-temp-将远程的代码拉取到temp临时分支里"><a href="#5-git-fetch-origin-temp-将远程的代码拉取到temp临时分支里" class="headerlink" title="5.git fetch origin temp,将远程的代码拉取到temp临时分支里"></a>5.git fetch origin temp,将远程的代码拉取到temp临时分支里</h3><h3 id="6-git-merge-temp，在当前master分支合并temp分支文件"><a href="#6-git-merge-temp，在当前master分支合并temp分支文件" class="headerlink" title="6.git merge temp，在当前master分支合并temp分支文件"></a>6.git merge temp，在当前master分支合并temp分支文件</h3><h3 id="7-再次使用git-status查看状态"><a href="#7-再次使用git-status查看状态" class="headerlink" title="7.再次使用git status查看状态"></a>7.再次使用git status查看状态</h3><h3 id="8-合并中会出现部分unmerged的文件，然后打开这些文件，手动解决冲突。"><a href="#8-合并中会出现部分unmerged的文件，然后打开这些文件，手动解决冲突。" class="headerlink" title="8.合并中会出现部分unmerged的文件，然后打开这些文件，手动解决冲突。"></a>8.合并中会出现部分unmerged的文件，然后打开这些文件，手动解决冲突。</h3><h3 id="9-冲突的同一个文件里的内容会有"><a href="#9-冲突的同一个文件里的内容会有" class="headerlink" title="9.冲突的同一个文件里的内容会有"></a>9.冲突的同一个文件里的内容会有</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;HEAD</span><br><span class="line">这里是你本地项目的代码</span><br><span class="line">====</span><br><span class="line">这里是从远程下下来的代码</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;temp</span><br></pre></td></tr></table></figure><p>看下哪里有冲突，手动解决后需要删除<code>&lt;&lt;&lt;&lt;&lt;&lt;HEAD</code>、<code>====</code>、<code>&gt;&gt;&gt;&gt;&gt;temp</code>这些多余的字符，至此冲突解决。<br>然后正常的通过git add,git commit，git push [远程名] [本地分支]:[远程分支] 进行操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/stones-167089_960_720.jpg&quot; alt=&quot;github&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="github" scheme="https://github.com/annkee/categories/github/"/>
    
    
      <category term="github" scheme="https://github.com/annkee/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号授权</title>
    <link href="https://github.com/annkee/2018/11/05/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%88%E6%9D%83/"/>
    <id>https://github.com/annkee/2018/11/05/微信公众号授权/</id>
    <published>2018-11-04T16:00:00.000Z</published>
    <updated>2019-07-08T10:38:50.072Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/5841000-09aa556d9b535680.png" alt="👍" style="width: 100%"><br><a id="more"></a></p><p>首先附上微信官方文档：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842</a></p><h1 id="授权登陆大致流程"><a href="#授权登陆大致流程" class="headerlink" title="授权登陆大致流程"></a>授权登陆大致流程</h1><p>1.前端重定向到授权地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var url = &quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=&quot; +</span><br><span class="line"> &quot;你的appid&quot; + &quot;&amp;redirect_uri=&quot; + &quot;你当前的页面地址，这个地址跟后台的域名回调地址的域名相同&quot; + &quot;&amp;response_type=code&amp;scope=snsapi_base&amp;state=STATE&amp;connect_redirect=1#wechat_redirect&quot;;</span><br><span class="line"></span><br><span class="line"># 重定向到微信授权地址</span><br><span class="line">window.location.href=url</span><br></pre></td></tr></table></figure></p><p>注：redirect_uri：的地址所在域名需要在公众平台后台配置：<br>如图：<br><img src="https://upload-images.jianshu.io/upload_images/5841000-2fd2c0ba82eecf58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置回调域名"><br><img src="https://upload-images.jianshu.io/upload_images/5841000-09aa556d9b535680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置回调域名"></p><p>2.获取微信返回到code，给后台传过去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var url = &quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=&quot; +</span><br><span class="line"> &quot;你的appid&quot; + &quot;&amp;redirect_uri=&quot; + &quot;你当前的页面地址，这个地址跟后台的域名回调地址的域名相同&quot; + &quot;&amp;response_type=code&amp;scope=snsapi_base&amp;state=STATE&amp;connect_redirect=1#wechat_redirect&quot;;</span><br><span class="line"></span><br><span class="line">var codeUrl = location.search();</span><br><span class="line">if(codeUrl!=&quot;&quot;&amp;&amp; codeUrl!=null&amp;&amp;code.indexOf(&quot;code&quot;)!=-1)&#123;</span><br><span class="line">//此处就获得了code，具体代码自己写吧，就是截取字符串获取code参数</span><br><span class="line">&#125;else&#123;</span><br><span class="line">// 重定向到微信授权地址</span><br><span class="line">window.location.href=url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="获取accesstoken如果报错：accesstoken-invalid-ip-55-11-11-10-not-in-whitelist"><a href="#获取accesstoken如果报错：accesstoken-invalid-ip-55-11-11-10-not-in-whitelist" class="headerlink" title="获取accesstoken如果报错：accesstoken invalid ip 55.11.11.10, not in whitelist"></a>获取accesstoken如果报错：accesstoken invalid ip 55.11.11.10, not in whitelist</h1><p>此时需要在微信公众平台–&gt;基本配置–&gt;IP白名单设置此IP即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/5841000-09aa556d9b535680.png&quot; alt=&quot;👍&quot; style=&quot;width: 100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring mybatis整合</title>
    <link href="https://github.com/annkee/2018/08/05/spring-mybatis/"/>
    <id>https://github.com/annkee/2018/08/05/spring-mybatis/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2019-08-05T05:15:55.353Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/spring.jpg" alt="spirng" style="width: 100%"></p><a id="more"></a><h1 id="spring-mvc-logback-mybatis整合日志和mysql日志打印"><a href="#spring-mvc-logback-mybatis整合日志和mysql日志打印" class="headerlink" title="spring mvc+logback+mybatis整合日志和mysql日志打印"></a>spring mvc+logback+mybatis整合日志和mysql日志打印</h1><h3 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 日志记录 --&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;!-- 日志配置文件路径 --&gt;</span><br><span class="line">    &lt;param-name&gt;logbackConfigLocation&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath:conf/logback.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;ch.qos.logback.ext.spring.web.LogbackConfigListener&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure><h3 id="mybatis-config-xml配置"><a href="#mybatis-config-xml配置" class="headerlink" title="mybatis-config.xml配置"></a>mybatis-config.xml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;!-- 命名空间 --&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;!-- 映射map</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="logback-xml配置"><a href="#logback-xml配置" class="headerlink" title="logback.xml配置"></a>logback.xml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--myibatis log configure 控制台输出语句--&gt;</span><br><span class="line">&lt;logger name=&quot;com.xx.xx.dao.*&quot; level=&quot;DEBUG&quot;/&gt;</span><br></pre></td></tr></table></figure><h1 id="spring的声明式事务管理，可以回滚service的操作（当遇到异常情况时）"><a href="#spring的声明式事务管理，可以回滚service的操作（当遇到异常情况时）" class="headerlink" title="spring的声明式事务管理，可以回滚service的操作（当遇到异常情况时）"></a>spring的声明式事务管理，可以回滚service的操作（当遇到异常情况时）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Class Log&#123;</span><br><span class="line">  Propagation.REQUIRED</span><br><span class="line">  insertLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Propagation.REQUIRED</span><br><span class="line">void saveDept()&#123;</span><br><span class="line">  insertLog();//加入当前事务</span><br><span class="line">  ..异常部分</span><br><span class="line">  saveDept();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class LOg&#123;</span><br><span class="line">  Propagation.REQUIRED_NEW</span><br><span class="line">   insertLog();</span><br><span class="line">&#125;</span><br><span class="line">  Propagation.REQUIRED</span><br><span class="line">void saveDept()&#123;</span><br><span class="line">  insertLog();//始终开启事务</span><br><span class="line">  ..异常部分，日志不会回滚</span><br><span class="line">  saveDept();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Aop-aspect-object-programming-面向切面编程"><a href="#Aop-aspect-object-programming-面向切面编程" class="headerlink" title="Aop(aspect object programming): 面向切面编程"></a>Aop(aspect object programming): 面向切面编程</h1><ul><li>功能：让关注点代码与业务代码分离！</li><li>关注点: 重复代码就叫做关注点；</li><li>切面: 关注点形成的类，就叫切面(类).</li><li>面向切面编程，就是指对很多功能都有的重复的代码抽取，再在运行的时候往业务方法上动态植入“切面类代码”。</li><li>切入点: 执行目标对象方法，动态植入切面代码。可以通过切入点表达式，指定拦截哪些类的哪些方法；给指定的类在运行的时候植入切面类代码。(根据需要进行拦截,是否需要拦截)切入点表达式,可以对指定的“方法”进行拦截； 从而给指定的方法所在的类生层代理对象。</li></ul><p><a href="http://cache.baiducontent.com/c?m=9d78d513d98203ef03b1c1690c66c0161d43f6652bd6a0020fde843c96735a315016e9ac53260705a3d20c1616df384b9b832106301420c68cb88f5dacbd85295f9f5130676f835662d20ed9cf5124b137e15cfedc18f0ca8425e4a5c6949f0a5c9015433897f1f8471d449432a5033194f7d81e494810cdb16723e21e752a9f2841b643f9e22f3d47c7ad8c021bde7c872742ccf174ad3d16be15a0191a23&amp;p=826cc64ad4891db508e2977e0f5cc4&amp;newp=8b2a9702cd9702e80fbd9b7d0d14cd231610db2151d4d71e6b82c825d7331b001c3bbfb423231606d8ce7f650aa94c56ebf537773d0425a3dda5c91d9fb4c57479cf3c60335bd1&amp;user=baidu&amp;fm=sc&amp;query=spring%B6%D4%B8%F7%B8%F6%BC%BC%CA%F5+%B5%C4%D6%A7%B3%D6%C4%A3%BF%E9&amp;qid=9a7533b70000e0b8&amp;p1=2" target="_blank" rel="noopener">spring七大模块详解</a></p><h1 id="spring-代理理解"><a href="#spring-代理理解" class="headerlink" title="spring 代理理解"></a>spring 代理理解</h1><h2 id="动态代理-用工厂类实现–需要实现接口"><a href="#动态代理-用工厂类实现–需要实现接口" class="headerlink" title="动态代理,用工厂类实现–需要实现接口"></a>动态代理,用工厂类实现–需要实现接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.测试类 </span><br><span class="line">ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;com/coffee/aop/bean.xml&quot;);</span><br><span class="line">/**</span><br><span class="line"> * 动态代理（jdk代理）</span><br><span class="line"> *</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void testAop() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    // 调用工厂类,获取注解</span><br><span class="line">    IUserDao userDao = (IUserDao) ac.getBean(&quot;userDaoProxy&quot;);</span><br><span class="line">    // 代理对象：class com.sun.proxy.$Proxy5</span><br><span class="line">    System.out.println(userDao.getClass());</span><br><span class="line">    userDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.代理工厂类–用反射实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;userDaoProxy&quot;)</span><br><span class="line">public class ProxyFactory &#123;</span><br><span class="line"></span><br><span class="line">   private static Object target;</span><br><span class="line">   private static Aop aop;</span><br><span class="line"></span><br><span class="line">   public static Object getProxyInstance(Object target_, Aop aop_) &#123;</span><br><span class="line">        target = target_;</span><br><span class="line">        aop = aop_;</span><br><span class="line"></span><br><span class="line">        return Proxy.newProxyInstance(target.getClass().getClassLoader(),</span><br><span class="line">                 target.getClass().getInterfaces(), new InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">                      @Override</span><br><span class="line">                      public Object invoke(Object proxy, Method method,</span><br><span class="line">                                Object[] objects) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                           // 在核心业务代码执行前，，引入重复执行的代码</span><br><span class="line">                           aop.begin();</span><br><span class="line">                           Object returnValue = method.invoke(target, objects);</span><br><span class="line">                           // 核心代码结束后执行收尾工作</span><br><span class="line">                           aop.commit();</span><br><span class="line">                           return returnValue;</span><br><span class="line">                      &#125;</span><br><span class="line">                 &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">```       </span><br><span class="line"></span><br><span class="line">## 动态代理--不需要使用工厂类,用注解</span><br><span class="line"></span><br><span class="line">1.dao层,加注解@Repository(&quot;userDao&quot;)</span><br><span class="line">```                     </span><br><span class="line">@Repository(&quot;userDao&quot;)</span><br><span class="line">public class UserDao implements IUserDao &#123;</span><br><span class="line"></span><br><span class="line">   public void save() &#123;</span><br><span class="line">        // 获取session/处理异常--每次都要重复执行此类代码：被称为【关注点代码：就是重复执行的代码】</span><br><span class="line">        System.out.println(&quot;UserDao 核心业务代码：保存数据。。&quot;);// 这才是真正的核心业务代码：【关键点代码】</span><br><span class="line">        // 关闭session/处理异常--每次都要重复执行此类代码：【关注点代码：就是重复执行的代码】</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>2.bean.xml</p><p>首先开启注解扫描</p><p><code>&lt;context:component-scan base-package=&quot;com.coffee.aop&quot;&gt;&lt;/context:component-scan&gt;</code></p><p>然后开启aop自动实现代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注解实现 aop编程 --&gt;</span><br><span class="line">&lt;!-- 1.在命名空间引入 aop相关头 --&gt;</span><br><span class="line">&lt;!-- 2.开启 aop注解 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure></p><h2 id="cglib代理-实现的cglib代理的类不能是final"><a href="#cglib代理-实现的cglib代理的类不能是final" class="headerlink" title="cglib代理:实现的cglib代理的类不能是final"></a>cglib代理:实现的cglib代理的类不能是final</h2><p>cglib代理：需要引入spring-core.jar文件</p><p>1.测试类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 注解代理:目标类没有实现接口，aop自动执行 cglib代理</span><br><span class="line">  *</span><br><span class="line">  * @throws Exception</span><br><span class="line">  */</span><br><span class="line"> @Test</span><br><span class="line"> public void testCglibAop() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">      // 调用工厂类</span><br><span class="line">      OrderDao orderDao = (OrderDao) ac.getBean(&quot;orderDao&quot;);</span><br><span class="line">      // 代理对象：class com.sun.proxy.$Proxy5</span><br><span class="line">      System.out.println(orderDao.getClass());</span><br><span class="line">      orderDao.save();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>2.dao层加注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 将目标对象加入ioc</span><br><span class="line">@Repository(&quot;orderDao&quot;)</span><br><span class="line">public class OrderDao &#123;// 没有实现接口，使用cglib代理</span><br><span class="line">     public void save() &#123;</span><br><span class="line">          System.out.println(&quot;OrderDao 核心业务代码：保存数据。。&quot;);// 这才是真正的核心业务代码：关键点代码</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><p>3.bean.xml配置注解,开启aop</p><p>首先开启注解扫描</p><p><code>&lt;context:component-scan base-package=&quot;com.coffee.aop&quot;&gt;&lt;/context:component-scan&gt;</code></p><p>然后开启aop自动实现代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注解实现 aop编程 --&gt;</span><br><span class="line">&lt;!-- 1.在命名空间引入 aop相关头 --&gt;</span><br><span class="line">&lt;!-- 2.开启 aop注解 --&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure></p><h2 id="cglib底层实现"><a href="#cglib底层实现" class="headerlink" title="cglib底层实现"></a>cglib底层实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyFactory_cglib implements MethodInterceptor &#123;</span><br><span class="line"></span><br><span class="line">     private Object target;// 维护代理对象</span><br><span class="line"></span><br><span class="line">     public ProxyFactory_cglib(Object target) &#123;</span><br><span class="line">          this.target = target;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // 给目标对象创建代理对象</span><br><span class="line">     public Object getProxyInstance() &#123;</span><br><span class="line">          // 1. 工具类,在引入的jar文件中spring-core.jar</span><br><span class="line">          Enhancer enhancer = new Enhancer();</span><br><span class="line">          // 2. 设置父类</span><br><span class="line">          enhancer.setSuperclass(target.getClass());</span><br><span class="line">          // 3. 设置回掉函数</span><br><span class="line">          enhancer.setCallback(this);</span><br><span class="line">          // 4. 创建子类代理对象,,,,所以使用cglib代理的dao不能是final的</span><br><span class="line">          return enhancer.create();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="关注点代码-amp-amp-关键点代码"><a href="#关注点代码-amp-amp-关键点代码" class="headerlink" title="关注点代码&amp;&amp;关键点代码"></a>关注点代码&amp;&amp;关键点代码</h2><p>dao层<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void save() &#123;</span><br><span class="line">    // 获取session/处理异常--每次都要重复执行此类代码：被称为【关注点代码：就是重复执行的代码】</span><br><span class="line">    System.out.println(&quot;UserDao 核心业务代码：保存数据。。&quot;);// 这才是真正的核心业务代码：【关键点代码】</span><br><span class="line">    // 关闭session/处理异常--每次都要重复执行此类代码：【关注点代码：就是重复执行的代码】</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>切入点表达式</p><p>bean.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置aop --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">  &lt;!-- 定义一个切入点表达式 ,指定拦截哪些类的哪些方法--&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot;execution(* com.coffee.pointcut.*.*(..))&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 从这开始#######【下面是测试别的方法】######### --&gt;</span><br><span class="line">  &lt;!-- 拦截所有的public方法--&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot;execution(public * *(..))&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line">  &lt;!-- 拦截所有的save方法--&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot;execution(* save*(..))&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line">  &lt;!-- 拦截指定类的指定的指定方法,具体到方法--&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot;execution(* com.coffee.pointcut.OrderDao.save(..))&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line">  &lt;!-- 拦截指定类的指定的所有方法,具体到类--&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot;execution(* com.coffee.pointcut.OrderDao.*(..))&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line">  &lt;!-- 拦截指定包，及其子包下的的所有类的所有方法 --&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot;execution(* com..*.*(..))&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line">  &lt;!-- 【多个表达式】 --&gt;</span><br><span class="line">  &lt;!-- 拦截或的关系的方法，不能用and 或者&amp;&amp; --&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot;execution(* com.coffee.pointcut.OrderDao.save()) || execution (* com.coffee.pointcut.UserDao.save())&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot;execution(* com.coffee.pointcut.OrderDao.save(..))) || execution(* com.coffee.pointcut.UserDao.save())&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line">  &lt;!-- 取非值 --&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot;!execution(* com.coffee.pointcut.OrderDao.save())&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line">  &lt;!-- not 前要加空格，和上面等价 --&gt;</span><br><span class="line">  &lt;aop:pointcut expression=&quot; not execution(* com.coffee.pointcut.OrderDao.save())&quot; id=&quot;pt&quot;/&gt;</span><br><span class="line">&lt;!-- 从这结束################ --&gt;</span><br><span class="line">  &lt;!-- 切面配置 --&gt;</span><br><span class="line">  &lt;aop:aspect ref=&quot;aop&quot;&gt;</span><br><span class="line">      &lt;!-- 环绕通知 --&gt;</span><br><span class="line">      &lt;aop:around method=&quot;around&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">      &lt;!-- 前置通知 --&gt;</span><br><span class="line">      &lt;aop:before method=&quot;begin&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">      &lt;!-- 后置通知（最终通知） --&gt;</span><br><span class="line">      &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">      &lt;!-- 返回后通知 --&gt;</span><br><span class="line">      &lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">      &lt;!-- 异常的通知 --&gt;</span><br><span class="line">      &lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut-ref=&quot;pt&quot;/&gt;</span><br><span class="line">  &lt;/aop:aspect&gt;</span><br><span class="line"></span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></p><h2 id="aop切面类"><a href="#aop切面类" class="headerlink" title="aop切面类:"></a>aop切面类:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">public class Aop &#123;</span><br><span class="line"></span><br><span class="line"> public void begin() &#123;</span><br><span class="line">      System.out.println(&quot;开始事务/异常&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void after() &#123;</span><br><span class="line">      System.out.println(&quot;提交事务/关闭&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void afterReturning() &#123;</span><br><span class="line"></span><br><span class="line">      System.out.println(&quot;afterReturning()&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 目标方法异常处理</span><br><span class="line"> public void afterThrowing() &#123;</span><br><span class="line"></span><br><span class="line">      System.out.println(&quot;afterThrowing()&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void around(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">      System.out.println(&quot;环绕前执行。。相当于@Before()&quot;);</span><br><span class="line">      pjp.proceed();</span><br><span class="line">      System.out.println(&quot;还绕后执行。。相当于@After()&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 事务传播的属性</span><br><span class="line">@Service</span><br><span class="line">public class T_DeptService &#123;</span><br><span class="line"></span><br><span class="line"> @Resource</span><br><span class="line"> // 加入容器</span><br><span class="line"> T_DeptDao t_DeptDao = new T_DeptDao();</span><br><span class="line"> @Resource</span><br><span class="line"> LogsDao logsDao = new LogsDao();</span><br><span class="line"></span><br><span class="line"> // 事务传播的属性</span><br><span class="line"> @Transactional(</span><br><span class="line"> // readOnly = false,</span><br><span class="line"> // timeout = -1,</span><br><span class="line"> // noRollbackFor = ArithmeticException.class 遇到异常不回滚</span><br><span class="line"> // propagation=Propagation.REQUIRED Propagation.REQUIRED</span><br><span class="line"> // 指定当前的方法必须在事务的环境下执行；</span><br><span class="line"> // 如果当前运行的方法，已经存在事务， 就会加入当前的事务，受当前事务约束；</span><br><span class="line"> // Propagation.REQUIRED_NEW</span><br><span class="line"> // 指定当前的方法必须在事务的环境下执行；</span><br><span class="line"> // 如果当前运行的方法，已经存在事务： 事务会挂起（就像遇到异常不回滚此方法）； 会始终开启一个新的事务，执行完后； 刚才挂起的事务才继续运行。</span><br><span class="line"></span><br><span class="line"> )</span><br><span class="line"> // 必须加上这个注解才能实现注解的spring事务控制，这个注解可以加载类上，父类上，范围范围根据加在什么上面而不同</span><br><span class="line"> public void save(T_Dept t_Dept) &#123;</span><br><span class="line"></span><br><span class="line">      logsDao.insertlog();</span><br><span class="line">      int i = 1 / 0;// 模拟中间的异常,配置spring事务控制后遇到异常就会回滚，即上面的数据库操作无效</span><br><span class="line">      t_DeptDao.save(t_Dept);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 1.【c3p0连接池 数据源配置(oracle)】 --&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;driverClass&quot; value=&quot;oracle.jdbc.driver.OracleDriver&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;user&quot; value=&quot;wangan&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;password&quot; value=&quot;666&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;initialPoolSize&quot; value=&quot;3&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;maxPoolSize&quot; value=&quot;10&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;maxStatements&quot; value=&quot;100&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;acquireIncrement&quot; value=&quot;2&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 2.【数据库模板】 --&gt;</span><br><span class="line">    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="pring声明式事务管理"><a href="#pring声明式事务管理" class="headerlink" title="pring声明式事务管理"></a>pring声明式事务管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ####5. spring声明式事务管理器### --&gt;</span><br><span class="line">&lt;!-- 1. 配置事务管理器类 --&gt;</span><br><span class="line">&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 2. 配置事务增强 ，如何管理事务--&gt;</span><br><span class="line">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;txManager&quot;&gt;</span><br><span class="line">  &lt;tx:attributes&gt;</span><br><span class="line">  &lt;!-- 以get开头/find开头的所有方法只读，剩下的读写 --&gt;</span><br><span class="line">      &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">      &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">      &lt;tx:method name=&quot;*&quot; read-only=&quot;false&quot;/&gt;</span><br><span class="line">  &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;!-- 3. 配置aop，拦截哪些方法(切入点表达式)+应用上面的事务增强  --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">  &lt;aop:pointcut id=&quot;pt&quot; expression=&quot;execution(* com.coffee.spring_transaction.T_DeptService.*(..))&quot; /&gt;&lt;!-- (..)带上两个点;第一个*式返回值类型 --&gt;</span><br><span class="line">  &lt;!-- 引入切入点表达式 --&gt;</span><br><span class="line">  &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;pt&quot; /&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="mybatis中的sqlsession工具类"><a href="#mybatis中的sqlsession工具类" class="headerlink" title="mybatis中的sqlsession工具类"></a>mybatis中的sqlsession工具类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">package utils;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.Reader;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 加载mybatis配置文件</span><br><span class="line"> * @author wangan</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class MybatisUtil &#123;</span><br><span class="line"></span><br><span class="line">    // 本地线程,用于绑定session,,SqlSession是mybatis里面的创建session的类,hibernate是session</span><br><span class="line">    private static ThreadLocal&lt;SqlSession&gt; threadLocal = new ThreadLocal&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    // 私有化无参构造,防止人为不断new他</span><br><span class="line">    private MybatisUtil() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 使用static静态块的好处就是加载快,只能加载一次</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 加载src/mybatis.xml</span><br><span class="line">            Reader reader = Resources.getResourceAsReader(&quot;mybatis.xml&quot;);</span><br><span class="line">            // 加载reader,创建sqlSessionFactory</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回session</span><br><span class="line">     */</span><br><span class="line">    public static SqlSession getSqlSession() &#123;</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = threadLocal.get();</span><br><span class="line">        if (sqlSession == null) &#123;</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            // 本地线程绑定sqlsession</span><br><span class="line">            threadLocal.set(sqlSession);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关闭session</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public static void closeSqlSession() &#123;</span><br><span class="line">        SqlSession sqlSession = threadLocal.get();</span><br><span class="line">        if (sqlSession != null) &#123;</span><br><span class="line">            // 关闭session</span><br><span class="line">            sqlSession.close();</span><br><span class="line">            // 移除session,供GC回收,不然多次访问数据库后会变慢</span><br><span class="line">            threadLocal.remove();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射配置"><a href="#映射配置" class="headerlink" title="映射配置"></a>映射配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!-- namespace随便起名字 --&gt;</span><br><span class="line">&lt;mapper namespace=&quot;studentNamespace&quot;&gt;</span><br><span class="line">          &lt;!--  type=&quot;com.coffee.mybatis01.entity.Student&quot;名字太长,用别名在mybatis配置文件配置</span><br><span class="line">              id属性用来标记resultmap,如果实体类中的属性和表的字段不一致,用id</span><br><span class="line">              如果都一致,可选</span><br><span class="line">           --&gt;</span><br><span class="line">     &lt;resultMap type=&quot;student&quot; id=&quot;student&quot;&gt;</span><br><span class="line">          &lt;!-- 主键映射 --&gt;</span><br><span class="line">          &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;</span><br><span class="line">          &lt;!-- 其他属性映射 --&gt;</span><br><span class="line">          &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">          &lt;result property=&quot;sal&quot; column=&quot;sal&quot;/&gt;</span><br><span class="line">     &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--</span><br><span class="line">      StudentDao里面的add方法，就是插入方法名称（理论上随便起，方便理解就用一样的名字）</span><br><span class="line">      parameterType方法的参数的类型，写全路径</span><br><span class="line">       --&gt;</span><br><span class="line">       &lt;!-- 无参插入( parameterType=&quot;com.coffee.mybatis01.entity.Student&quot;省略) --&gt;</span><br><span class="line"> &lt;insert id=&quot;add1&quot; &gt;</span><br><span class="line">      &lt;!-- 插入的sql语句 --&gt;</span><br><span class="line">      insert into students values(1,&apos;张三&apos;,7000)</span><br><span class="line"> &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 带参插入 --&gt;</span><br><span class="line"> &lt;insert id=&quot;add2&quot;  parameterType=&quot;student&quot;&gt;</span><br><span class="line">      &lt;!-- 插入的sql语句 #&#123;id&#125;==student.getId(),是占位符的意思,hibernate是:= --&gt;</span><br><span class="line">      insert into students values(#&#123;id&#125;,#&#123;name&#125;,#&#123;sal&#125;)</span><br><span class="line"> &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 修改值 --&gt;</span><br><span class="line"> &lt;update id=&quot;update&quot; parameterType=&quot;student&quot;&gt;</span><br><span class="line">      update students set name=#&#123;name&#125;,sal=#&#123;sal&#125; where id=#&#123;id&#125;</span><br><span class="line"> &lt;/update&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 查询所有</span><br><span class="line">      resultType返回的是集合,但是我就是要遍历出来student,所以只写student类型</span><br><span class="line">  --&gt;</span><br><span class="line"> &lt;select id=&quot;findAll&quot; resultType=&quot;student&quot;&gt;</span><br><span class="line">      select * from students</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 根据id查询</span><br><span class="line">      resultMap映射resultMap里的id,代表返回值类型,根据id的类型进行返回值判断,resultType比较精确,resultMap是通用的</span><br><span class="line"> --&gt;</span><br><span class="line"> &lt;select id=&quot;findById&quot; parameterType=&quot;int&quot; resultMap=&quot;student&quot;&gt;</span><br><span class="line">      select * from students where id=#&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 删除数据 --&gt;</span><br><span class="line"> &lt;delete id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">      delete from students where id=#&#123;id&#125;</span><br><span class="line"> &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- ###分页操作 --&gt;</span><br><span class="line"> &lt;!-- 无条件分页 --&gt;</span><br><span class="line"> &lt;select id=&quot;findPage&quot; resultMap=&quot;student&quot;&gt;</span><br><span class="line">  select * from students where id between #&#123;start&#125; and #&#123;end&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 动态sql查询 --&gt;</span><br><span class="line"> &lt;select id=&quot;dynaSelect&quot; parameterType=&quot;map&quot; resultMap=&quot;student&quot;&gt;</span><br><span class="line">      select * from students</span><br><span class="line">          &lt;where&gt;</span><br><span class="line">               &lt;!-- kid是map的Key键,test自动判断key值 --&gt;</span><br><span class="line">               &lt;if test=&quot;pid!=null&quot;&gt;</span><br><span class="line">                    and id=#&#123;pid&#125;</span><br><span class="line">               &lt;/if&gt;</span><br><span class="line">               &lt;if test=&quot;pname!=null&quot;&gt;</span><br><span class="line">                    and name=#&#123;pname&#125;</span><br><span class="line">               &lt;/if&gt;</span><br><span class="line">               &lt;if test=&quot;psal!=null&quot;&gt;</span><br><span class="line">                    and sal=#&#123;psal&#125;</span><br><span class="line">               &lt;/if&gt;</span><br><span class="line"></span><br><span class="line">          &lt;/where&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 动态sql update更新</span><br><span class="line">      name=#&#123;name&#125;,不要忘了逗号&apos;,&apos;</span><br><span class="line">      --&gt;</span><br><span class="line"> &lt;update id=&quot;dynaUpdate&quot; parameterType=&quot;student&quot;&gt;</span><br><span class="line">      update students</span><br><span class="line">          &lt;set&gt;</span><br><span class="line">               &lt;if test=&quot;name!=null&quot;&gt;</span><br><span class="line">                    name=#&#123;name&#125;,</span><br><span class="line">               &lt;/if&gt;</span><br><span class="line">               &lt;if test=&quot;sal!=null&quot;&gt;</span><br><span class="line">                    sal=#&#123;sal&#125;</span><br><span class="line">               &lt;/if&gt;</span><br><span class="line">          &lt;/set&gt;</span><br><span class="line">               where id=#&#123;id&#125;</span><br><span class="line"> &lt;/update&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 动态sql删除多个#迭代数组 --&gt;</span><br><span class="line"> &lt;delete id=&quot;dynaDelete&quot;&gt;</span><br><span class="line">      &lt;!-- 删除多个需要遍历数组(这里是数组的遍历array)</span><br><span class="line">            完整的sql是: delete from students where id in (1,3,5)</span><br><span class="line">           collection遍历的类型:array/list</span><br><span class="line">           open开头  close结尾</span><br><span class="line">           item遍历的名称,可以任意写,不需要和dao的一致</span><br><span class="line">           separator分隔符,分割数组的内容</span><br><span class="line">            #&#123;ids&#125;和item的一致</span><br><span class="line">      --&gt;</span><br><span class="line"></span><br><span class="line">      delete from students where id in</span><br><span class="line">      &lt;foreach collection=&quot;array&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;  item=&quot;ids&quot;&gt;</span><br><span class="line">           #&#123;ids&#125;</span><br><span class="line">      &lt;/foreach&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 动态sql删除多个,迭代list --&gt;</span><br><span class="line"> &lt;delete id=&quot;dynaDeleteList&quot;&gt;</span><br><span class="line">      delete from students where id in</span><br><span class="line">          &lt;foreach collection=&quot;list&quot; open=&quot;(&quot; close=&quot;)&quot; item=&quot;list&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">               #&#123;list&#125;</span><br><span class="line">          &lt;/foreach&gt;</span><br><span class="line"> &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- ####  动态插入对象 #######--&gt;</span><br><span class="line"> &lt;!--</span><br><span class="line">      insert into students (id,name,value) values (1,&quot;张三&quot;,5000.0)</span><br><span class="line">  --&gt;</span><br><span class="line">&lt;!--      &lt;sql id=&quot;key&quot;&gt;</span><br><span class="line"></span><br><span class="line">          &lt;if test=&quot;id!=null&quot;&gt;id,&lt;/if&gt;</span><br><span class="line">          &lt;if test=&quot;name!=null&quot;&gt;name,&lt;/if&gt;</span><br><span class="line">          &lt;if test=&quot;sal!=null&quot;&gt;sal&lt;/if&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/sql&gt;</span><br><span class="line"> &lt;sql id=&quot;value&quot;&gt;</span><br><span class="line">      trim标签可以去掉,同时把#&#123;sal&#125;,的逗号去掉</span><br><span class="line">      &lt;trim suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">          &lt;if test=&quot;id!=null&quot;&gt;#&#123;id&#125;,&lt;/if&gt;</span><br><span class="line">          &lt;if test=&quot;name!=null&quot;&gt;#&#123;name&#125;,&lt;/if&gt;</span><br><span class="line">          &lt;if test=&quot;sal!=null&quot;&gt;#&#123;sal&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;/trim&gt;</span><br><span class="line"> &lt;/sql&gt;</span><br><span class="line"></span><br><span class="line"> &lt;insert id=&quot;dynaInsert&quot;&gt;</span><br><span class="line">      insert into students (&lt;include refid=&quot;key&quot;&gt;&lt;/include&gt;)</span><br><span class="line">          values(&lt;include refid=&quot;value&quot;&gt;&lt;/include&gt;)</span><br><span class="line"> &lt;/insert&gt; --&gt;</span><br><span class="line"> &lt;!-- 效果同上,都可以插入 --&gt;</span><br><span class="line"> &lt;insert id=&quot;dynaInsert&quot;&gt;</span><br><span class="line">      insert into students (id,name,sal)</span><br><span class="line">          values(#&#123;id&#125;,#&#123;name&#125;,#&#123;sal&#125;)</span><br><span class="line"> &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="dao调用"><a href="#dao调用" class="headerlink" title="dao调用"></a>dao调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line">package com.coffee.mybatis01.dao;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line">import utils.MybatisUtil;</span><br><span class="line"></span><br><span class="line">import com.coffee.mybatis01.entity.Student;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数据访问层</span><br><span class="line"> * @author wangan</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class StudentDao &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加学生--无参</span><br><span class="line">     * @param student</span><br><span class="line">     */</span><br><span class="line">    public void add1() throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">        sqlSession.insert(&quot;studentNamespace.add1&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // 回滚操作</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加学生--有参</span><br><span class="line">     * @param student</span><br><span class="line">     */</span><br><span class="line">    public void add2(Student student) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">        // 插入对象,指定映射空间名称,和&lt;insert&gt;标签的id</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSession.insert(&quot;studentNamespace.add2&quot;, student);</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改学生</span><br><span class="line">     * @param student</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public void update(Student student) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSession.update(&quot;studentNamespace.update&quot;, student);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询所有学生</span><br><span class="line">     * @param student</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public List&lt;Student&gt; findAll() throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">        List&lt;Student&gt; studentList = new ArrayList&lt;Student&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            studentList = sqlSession.selectList(&quot;studentNamespace.findAll&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据id查询学生</span><br><span class="line">     * @param student</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public Student findById(int id) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">        Student student = new Student();</span><br><span class="line">        try &#123;</span><br><span class="line">            student = sqlSession.selectOne(&quot;studentNamespace.findById&quot;, id);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line">        return student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除学生</span><br><span class="line">     * @param student</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public void delete(int id) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSession.delete(&quot;studentNamespace.delete&quot;, id);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 分页查询--无条件</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public List&lt;Student&gt; findPage(int start, int end) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">        List&lt;Student&gt; students = new ArrayList&lt;Student&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = new LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">            map.put(&quot;start&quot;, start);</span><br><span class="line">            map.put(&quot;end&quot;, end);</span><br><span class="line"></span><br><span class="line">            students = sqlSession.selectList(&quot;studentNamespace.findPage&quot;, map);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line">        return students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态sql查询--参数使用包装类型进行条件判断时如果是null代表不限,不确定,任意</span><br><span class="line">     */</span><br><span class="line">    public List&lt;Student&gt; dynaSelect(Integer id, String name, Double sal)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">        List&lt;Student&gt; list = new ArrayList&lt;Student&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = new LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">            map.put(&quot;pid&quot;, id);</span><br><span class="line">            map.put(&quot;pname&quot;, name);</span><br><span class="line">            map.put(&quot;psal&quot;, sal);</span><br><span class="line"></span><br><span class="line">            list = sqlSession.selectList(&quot;studentNamespace.dynaSelect&quot;, map);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态sql更新</span><br><span class="line">     */</span><br><span class="line">    public void dynaUpdate(Student student) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSession.update(&quot;studentNamespace.dynaUpdate&quot;, student);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态sql迭代数组--根据id删除多个</span><br><span class="line">     */</span><br><span class="line">    public void dynaDelete(int... ids) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSession.delete(&quot;studentNamespace.dynaDelete&quot;, ids);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态sql迭代list集合--根据id删除多个</span><br><span class="line">     */</span><br><span class="line">    public void dynaDeleteList(List&lt;Integer&gt; list) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSession.delete(&quot;studentNamespace.dynaDeleteList&quot;, list);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态sql插入对象</span><br><span class="line">     */</span><br><span class="line">    public void dynaInsert(Student student) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSession.insert(&quot;studentNamespace.dynaInsert&quot;, student);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            MybatisUtil.closeSqlSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合之注册功能"><a href="#整合之注册功能" class="headerlink" title="整合之注册功能"></a>整合之注册功能</h2><h3 id="spring-xml配置文件"><a href="#spring-xml配置文件" class="headerlink" title="spring.xml配置文件"></a>spring.xml配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans</span><br><span class="line"></span><br><span class="line">  xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">   xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">   xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">   xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;</span><br><span class="line"></span><br><span class="line">   http://www.springframework.org/schema/beans</span><br><span class="line">   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">  http://www.springframework.org/schema/context</span><br><span class="line">  http://www.springframework.org/schema/context/spring-context-3.0.xsd</span><br><span class="line">  http://www.springframework.org/schema/aop</span><br><span class="line">  http://www.springframework.org/schema/aop/spring-aop.xsd</span><br><span class="line">  http://www.springframework.org/schema/tx</span><br><span class="line">  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span><br><span class="line">  http://www.springframework.org/schema/mvc</span><br><span class="line">  http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 1. 配置c3p0连接池 --&gt;</span><br><span class="line">  &lt;bean id=&quot;comboPooledDataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;driverClass&quot; value=&quot;oracle.jdbc.driver.OracleDriver&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;user&quot; value=&quot;wangan&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;password&quot; value=&quot;666&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 2. 配置sqlsession代替原生mybatisUtil工具类 --&gt;</span><br><span class="line">  &lt;bean id=&quot;sqlSessionFactoryBean&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">      &lt;!-- 加载配置文件mybatis.xml --&gt;</span><br><span class="line">      &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot;/&gt;</span><br><span class="line">      &lt;!-- 引入数据资源 --&gt;</span><br><span class="line">      &lt;property name=&quot;dataSource&quot; ref=&quot;comboPooledDataSource&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 3. mybatis事务管理器,底层用的是jdbc --&gt;</span><br><span class="line">  &lt;bean id=&quot;dataSourceTransactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">      &lt;!-- 引入数据源 --&gt;</span><br><span class="line">      &lt;property name=&quot;dataSource&quot; ref=&quot;comboPooledDataSource&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 4. 配置事物通知,如何管理事物 --&gt;</span><br><span class="line">  &lt;tx:advice id=&quot;tx&quot; transaction-manager=&quot;dataSourceTransactionManager&quot;&gt;</span><br><span class="line">      &lt;tx:attributes&gt;</span><br><span class="line">          &lt;!-- REQUIRED默认,在有事物情况下执行,没有事物就创建新的事物</span><br><span class="line">               propagation=&quot;REQUIRED&quot; 默认</span><br><span class="line">               read-only=&quot;false&quot;  默认</span><br><span class="line">           --&gt;</span><br><span class="line">          &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;false&quot;/&gt;</span><br><span class="line">      &lt;/tx:attributes&gt;</span><br><span class="line">  &lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 5.配置事物切面aop,拦截哪些方法 --&gt;</span><br><span class="line">  &lt;aop:config&gt;</span><br><span class="line">      &lt;aop:pointcut expression=&quot;execution(* com.coffee.dao.*.*(..))&quot; id=&quot;pointcut&quot;/&gt;</span><br><span class="line">      &lt;aop:advisor advice-ref=&quot;tx&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span><br><span class="line">  &lt;/aop:config&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!-- 注册dao --&gt;</span><br><span class="line">  &lt;bean id=&quot;studentDao&quot; class=&quot;com.coffee.dao.StudentDao&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactoryBean&quot;/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">  &lt;!-- 注册service --&gt;</span><br><span class="line">  &lt;bean name=&quot;studentService&quot; class=&quot;com.coffee.service.StudentService&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;studentDao&quot; ref=&quot;studentDao&quot;&gt;&lt;/property&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 注册action(注解),里面有service,service加了注解,扫描 --&gt;</span><br><span class="line">  &lt;context:component-scan base-package=&quot;com.coffee&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!-- 通知springioc注解作用 --&gt;</span><br><span class="line">  &lt;context:annotation-config /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!-- 视图解析器 --&gt;</span><br><span class="line"> &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;prefix&quot; value=&quot;/jsp/&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.coffee.dao;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line">import com.coffee.entity.Student;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数据访问--StudentDao</span><br><span class="line"> * @author wangan</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class StudentDao &#123;</span><br><span class="line"></span><br><span class="line">    // 注入sqlsession工厂</span><br><span class="line">    private SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">        this.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加学生</span><br><span class="line">     * @param student</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public void add(Student student) throws Exception &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        sqlSession.insert(&quot;studentNamespace.add&quot;, student);</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.coffee.service;</span><br><span class="line"></span><br><span class="line">import com.coffee.dao.StudentDao;</span><br><span class="line">import com.coffee.entity.Student;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 数据访问</span><br><span class="line"> * @author wangan</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class StudentService &#123;</span><br><span class="line"></span><br><span class="line">    private StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    public void setStudentDao(StudentDao studentDao) &#123;</span><br><span class="line">        this.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void register(Student student) throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            studentDao.add(student);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.coffee.action;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import com.coffee.entity.Student;</span><br><span class="line">import com.coffee.service.StudentService;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * action</span><br><span class="line"> * @author wangan</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(value = &quot;/student&quot;)</span><br><span class="line">public class StudentAction &#123;</span><br><span class="line"></span><br><span class="line">    private StudentService studentService;</span><br><span class="line"></span><br><span class="line">    @Resource(name = &quot;studentService&quot;)</span><br><span class="line">    public void setStudentService(StudentService studentService) &#123;</span><br><span class="line">        this.studentService = studentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册学生</span><br><span class="line">     * @param student</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/register&quot;)</span><br><span class="line">    public String registerStudent(Student student) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            studentService.register(student);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">import com.coffee.dao.StudentDao;</span><br><span class="line">import com.coffee.entity.Student;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试整合</span><br><span class="line"> * @author wangan</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class TestSpring_mybatis &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Student student = new Student(20, &quot;王林&quot;, 8000d);</span><br><span class="line"></span><br><span class="line">        ApplicationContext ac = new ClassPathXmlApplicationContext(</span><br><span class="line">                new String[] &#123; &quot;spring.xml&quot; &#125;);</span><br><span class="line">        StudentDao studentDao = (StudentDao) ac.getBean(&quot;studentDao&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            studentDao.add(student);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;3.1&quot;&gt;</span><br><span class="line">  &lt;display-name&gt;sshProject2&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- struts2 配置 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">   &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">     &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">   &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">   &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- spring配置 --&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">   &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">   &lt;param-value&gt;classpath:bean.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">&lt;!-- 服务器启动时自动装配spring的配置bean.xml --&gt;</span><br><span class="line">     &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br><span class="line"></span><br><span class="line">&lt;welcome-file-list&gt;</span><br><span class="line">  &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">&lt;/welcome-file-list&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h3 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 拦截器 --&gt;</span><br><span class="line"> &lt;interceptors&gt;</span><br><span class="line">      &lt;interceptor name=&quot;userInterceptor&quot; class=&quot;com.coffee.action.UserInterceptor&quot;&gt;&lt;/interceptor&gt;</span><br><span class="line">      &lt;interceptor-stack name=&quot;myStack&quot;&gt;</span><br><span class="line">          &lt;!-- 配置struts2框架运行时，默认执行自定义拦截器栈 --&gt;</span><br><span class="line">          &lt;interceptor-ref name=&quot;defaultStack&quot;&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">          &lt;!-- 应用自定义拦截器 --&gt;</span><br><span class="line">          &lt;interceptor-ref name=&quot;userInterceptor&quot;&gt;&lt;/interceptor-ref&gt;</span><br><span class="line">      &lt;/interceptor-stack&gt;</span><br><span class="line"> &lt;/interceptors&gt;</span><br><span class="line"> &lt;!-- 执行指定的拦截器 --&gt;</span><br><span class="line"> &lt;default-interceptor-ref name=&quot;myStack&quot;&gt;&lt;/default-interceptor-ref&gt;</span><br></pre></td></tr></table></figure><h3 id="UserInterceptor-java"><a href="#UserInterceptor-java" class="headerlink" title="UserInterceptor.java"></a>UserInterceptor.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.coffee.action;</span><br><span class="line"></span><br><span class="line">import com.opensymphony.xwork2.ActionContext;</span><br><span class="line">import com.opensymphony.xwork2.ActionInvocation;</span><br><span class="line">import com.opensymphony.xwork2.interceptor.AbstractInterceptor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 管理员拦截器</span><br><span class="line"> * 较验用户是否登陆，只有登陆后才可以进行操作。</span><br><span class="line"> * 没有登陆，只能查看列表，不能操作！</span><br><span class="line"> * @author wangan</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@SuppressWarnings(&quot;all&quot;)</span><br><span class="line">public class UserInterceptor extends AbstractInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    // 所有的拦截器都会调用此方法</span><br><span class="line">    public String intercept(ActionInvocation invocation) throws Exception &#123;</span><br><span class="line">        // 1.得到当前执行的方法--代理获取方法</span><br><span class="line">        String methodName = invocation.getProxy().getMethod();</span><br><span class="line">        // 2.得到actionContext对象</span><br><span class="line">        ActionContext context = invocation.getInvocationContext();</span><br><span class="line">        // 3.获取session，从session获取登录用户对象</span><br><span class="line">        Object object = context.getSession().get(&quot;adminInfo&quot;);</span><br><span class="line">        // 4.判断方法是否放行，登录方法放行</span><br><span class="line">        if (!&quot;login&quot;.equals(methodName) &amp;&amp; !&quot;list&quot;.equals(methodName)) &#123;</span><br><span class="line">            if (object == null) &#123;</span><br><span class="line">                // 没有登录</span><br><span class="line">                return &quot;login&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 执行action ,放行</span><br><span class="line">                return invocation.invoke();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 允许访问登录/列表展示</span><br><span class="line">            return invocation.invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 3. 修改员工-进入修改页面(list.jsp里面的修改 链接跳转到这里)</span><br><span class="line">  * struts2的保存修改数据的方式就是模型驱动，先把旧的数据移除，新的压进栈</span><br><span class="line">  */</span><br><span class="line">public String viewUpdate() &#123;// 更新一条记录的关键步骤</span><br><span class="line">      // 1.获取主键</span><br><span class="line">      int id = employee.getEmployeeId();</span><br><span class="line">      // 2.根据员工的主键查询，此时已经有部门信息（lazy=false）</span><br><span class="line">      Employee employee = employeeService.findById(id);</span><br><span class="line">      // 3. 查询所有的部门信息</span><br><span class="line">      List&lt;Dept&gt; listDept = deptService.getAll();</span><br><span class="line"></span><br><span class="line">      // 4.数据回显</span><br><span class="line">      // 获取valueStack对象</span><br><span class="line">      ValueStack valueStack = ActionContext.getContext().getValueStack();</span><br><span class="line">      // 移除栈顶元素（旧的）</span><br><span class="line">      valueStack.pop();</span><br><span class="line">      // 入栈，即将更新的值</span><br><span class="line">      valueStack.push(employee);</span><br><span class="line">      request.put(&quot;listDept&quot;, listDept);</span><br><span class="line">      return &quot;edit&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;</span><br><span class="line">    &lt;!-- name=&quot;deptId&quot;随便取，代表下拉列表名字 --&gt;</span><br><span class="line">    &lt;s:select list=&quot;#request.listDept&quot; listKey=&quot;deptId&quot; listValue=&quot;deptName&quot; name=&quot;deptid&quot; headerKey=&quot;-1&quot; headerValue=&quot;请选择&quot; value=&quot;-1&quot;&gt;&lt;/s:select&gt;</span><br><span class="line">&lt;/td&gt;</span><br></pre></td></tr></table></figure><p>做注册的时候员工的信息联系到另外一张表部门表,下拉菜单选择部门的时候这个deptid顺带传过去提交到注册action<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 封装部门id，下拉列表里面的name=“deptid”的值</span><br><span class="line"> private int deptid;</span><br><span class="line"></span><br><span class="line"> public void setDeptid(int deptid) &#123;</span><br><span class="line">      this.deptid = deptid;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public int getDeptid() &#123;</span><br><span class="line">      return deptid;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//注册</span><br><span class="line">public String save() &#123;</span><br><span class="line">          // 先根据部门主键查询</span><br><span class="line">          Dept dept = deptService.findById(deptid);</span><br><span class="line">          // 部门设置到员工对象中</span><br><span class="line">          employee.setDept(dept);</span><br><span class="line">          // 保存员工</span><br><span class="line">          employeeService.save(employee);</span><br><span class="line"></span><br><span class="line">          return &quot;listAction&quot;;// 重定向到Action</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p><h3 id="mybatis工作流程"><a href="#mybatis工作流程" class="headerlink" title="mybatis工作流程:"></a>mybatis工作流程:</h3><p>1️⃣ 通过Reader对象读取src目录下面的mybatis.xml配置文件(可自定义路径)<br>2️⃣ 通过SqlSessionBuilder对象创建SqlSessionFactory对象<br>3️⃣ 从当前线程中获取SqlSession对象<br>4️⃣ 事物开始,在mybatis中默认<br>5️⃣ 通过SqlSession对象读取StudentMapper.xml映射文件中的操作编号,从而读取sql语句<br>6️⃣ 事物必须提交<br>7️⃣ 关闭SqlSession对象.并且分开当前线程与SqlSession对象,让GC尽早回收</p><h3 id="批量插入数据–list集合"><a href="#批量插入数据–list集合" class="headerlink" title="批量插入数据–list集合"></a>批量插入数据–list集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertList&quot;&gt;</span><br><span class="line">INSERT INTO BUY_ORDER_DETAIL (BOD_ID, GOODS_ID, GOODS_NAME,</span><br><span class="line">GOODS_UNIT, GOODS_TYPE, GOODS_COLOR,</span><br><span class="line">BOD_AMOUNT, BOD_BUY_PRICE, BOD_TOTAL_PRICE,</span><br><span class="line">BO_ID, BOD_IMEI_LIST)</span><br><span class="line">&lt;foreach close=&quot;)&quot; collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot; open=&quot;(&quot; separator=&quot;union&quot;&gt;</span><br><span class="line">SELECT</span><br><span class="line">#&#123;item.bodId,jdbcType=VARCHAR&#125;,#&#123;item.goodsId,jdbcType=VARCHAR&#125;,</span><br><span class="line">#&#123;item.goodsName,jdbcType=VARCHAR&#125;,#&#123;item.goodsUnit,jdbcType=VARCHAR&#125;,</span><br><span class="line">#&#123;item.goodsType,jdbcType=VARCHAR&#125;, #&#123;item.goodsColor,jdbcType=VARCHAR&#125;,</span><br><span class="line">#&#123;item.bodAmount,jdbcType=DECIMAL&#125;, #&#123;item.bodBuyPrice,jdbcType=DECIMAL&#125;,</span><br><span class="line">#&#123;item.bodTotalPrice,jdbcType=DECIMAL&#125;, #&#123;item.boId,jdbcType=VARCHAR&#125;,</span><br><span class="line">#&#123;item.bodImeiList,jdbcType=CLOB&#125;</span><br><span class="line">FROM DUAL</span><br><span class="line">&lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 分页查询商品,动态sql --&gt;</span><br><span class="line">&lt;select id=&quot;selectPageListUseDys&quot; parameterType=&quot;goods&quot; resultMap=&quot;goodsResultMap&quot;&gt;</span><br><span class="line">SELECT * FROM (</span><br><span class="line">SELECT ROWNUM RN,GO.* FROM</span><br><span class="line">(SELECT * FROM GOODS</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;if test=&quot;paramEntity.goodsName!=null&quot;&gt;AND GOODS_NAME LIKE #&#123;paramEntity.goodsName&#125;&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">ORDER BY GOODS_ID)GO</span><br><span class="line">WHERE ROWNUM &amp;lt;= #&#123;start&#125;+#&#123;rows&#125;)</span><br><span class="line">WHERE RN &amp;gt; #&#123;start&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>错误例2：将整个sql语句用<code>&lt;![CDATA[   ]]&gt;</code></p><p>标记来避免冲突，在一般情况下都是可行的，是由于该sql配置中有动态语句（where部分），将导致系统无法识别动态判断部分，导致整个sql语句非法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;find&quot; parameterClass=&quot;java.util.Map&quot; resultClass=&quot;java.lang.Long&quot;</span><br><span class="line">&lt;![CDATA[ select id   from tableA a,tableB b &lt;dynamic prepend=&quot;WHERE&quot;&gt;  &lt;isNotNull prepend=&quot;AND&quot; property=&quot;startDate&quot;</span><br><span class="line">a.act_time &gt;= #startDate#      and a.act_time &lt;= #endDate#     and a.id = b.id     &lt;/isNotNull&gt;</span><br><span class="line">&lt;/dynamic&gt;      ]]&gt;  &lt;/select&gt;      正确做法：缩小范围，只对有字符冲突部分进行合法性调整。</span><br><span class="line">&lt;select id=&quot;find&quot; parameterClass=&quot;java.util.Map&quot; resultClass=&quot;java.lang.Long&quot;&gt;     select i</span><br><span class="line">from tableA a,         tableB b    &lt;dynamic prepend=&quot;WHERE&quot;&gt;  &lt;isNotNull prepend=&quot;AND&quot; property=&quot;startDate&quot;&gt; </span><br><span class="line">a.act_time &gt;= #startDate# &lt;![CDATA[ and a.act_time &lt;= #endDate#  ]]&gt;     and a.id = b.id </span><br><span class="line">&lt;/isNotNull&gt;  &lt;/dynamic&gt;  &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ibatis中应该经常见到&lt;![CDATA[这样的东西吧，它的用处应该是转义一些特殊关键字字符，</span><br><span class="line">不合法的XML字符必须被替换为相应的实体。 下面是五个在XML文档中预定义好的实体: </span><br><span class="line">&amp;lt;                 &lt;       小于号                                            </span><br><span class="line">&amp;gt;                 &gt;       大于号 </span><br><span class="line">&amp;amp;                &amp;       和 </span><br><span class="line">&amp;apos;               &apos;       单引号 </span><br><span class="line">&amp;quot;               &quot;       双引号</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/spring.jpg&quot; alt=&quot;spirng&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="https://github.com/annkee/categories/spring/"/>
    
    
      <category term="spring" scheme="https://github.com/annkee/tags/spring/"/>
    
      <category term="mybatis" scheme="https://github.com/annkee/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu使用lantern翻墙</title>
    <link href="https://github.com/annkee/2018/07/23/lantern/"/>
    <id>https://github.com/annkee/2018/07/23/lantern/</id>
    <published>2018-07-22T16:00:00.000Z</published>
    <updated>2019-07-08T10:37:47.047Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/5841000-f8c1b0b88f230092.png" alt="lantern" style="width: 100%"></p><a id="more"></a><h1 id="Ubuntu蓝灯下载地址"><a href="#Ubuntu蓝灯下载地址" class="headerlink" title="Ubuntu蓝灯下载地址"></a>Ubuntu蓝灯下载地址</h1><p><a href="https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-64-bit.deb" target="_blank" rel="noopener">https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-64-bit.deb</a></p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>设置网络代理<br><img src="https://upload-images.jianshu.io/upload_images/5841000-f8c1b0b88f230092.png" alt="设置--&gt;网络代理--&gt;设置"></p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p><img src="http://p8pht6nl3.bkt.clouddn.com/lantern.png" alt="ip和端口号设置"></p><p>一般打开蓝灯会自动进行设置手动代理，如果不是手动代理，最好设置一下</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/5841000-f8c1b0b88f230092.png&quot; alt=&quot;lantern&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://github.com/annkee/categories/linux/"/>
    
    
      <category term="lantern" scheme="https://github.com/annkee/tags/lantern/"/>
    
      <category term="ubuntu" scheme="https://github.com/annkee/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>git-svn简述</title>
    <link href="https://github.com/annkee/2018/06/21/git-svn/"/>
    <id>https://github.com/annkee/2018/06/21/git-svn/</id>
    <published>2018-06-20T16:00:00.000Z</published>
    <updated>2019-07-08T10:37:21.225Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/git-svn.jpg" alt="git-svn" style="width: 100%"></p><a id="more"></a><h1 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h1><p>SVN是Subversion的简称，是一个开放源代码的版本控制系统,支持大多数常见的操作系统。作为一个开源的版本控制系统,Subversion管理着随时间改变的数据。这些数据放置在一个中央资料档案库(repository)中。这个档案库很像一个普通的文件服务器,不过它会记住每一次文件的变动。这样你就可以把档案恢复到旧的版本,或是浏览文件的变动历史。Subversion是一个通用的系统,可用来管理任何类型的文件,其中包括了程序源码。</p><p>集中式代码管理的核心是服务器，所有开发者在开始新一天的工作之前必须从服务器获取代码，然后开发，最后解决冲突，提交。所有的版本信息都放在服务器上。如果脱离了服务器，开发者基本上可以说是无法工作的。下面举例说明：<br>工作流程：</p><p><span id="inline-toc">1</span>从服务器下载项目组最新代码。<br><span id="inline-toc">2</span>进入自己的分支，进行工作，每隔一个小时向服务器自己的分支提交一次代码（很多人都有这个习惯。因为有时候自己对代码改来改去，最后又想还原到前一个小时的版本，或者看看前一个小时自己修改了哪些代码，就需要这样做了）。<br><span id="inline-toc">3</span>下班时间快到了，把自己的分支合并到服务器主分支上，一天的工作完成，并反映给服务器。</p><h1 id="GIT（分布式版本控制系统）"><a href="#GIT（分布式版本控制系统）" class="headerlink" title="GIT（分布式版本控制系统）"></a>GIT（分布式版本控制系统）</h1><p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目<br>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库.</p><h2 id="Git的功能特性："><a href="#Git的功能特性：" class="headerlink" title="Git的功能特性："></a>Git的功能特性：</h2><h3 id="从一般开发者的角度来看，git有以下功能："><a href="#从一般开发者的角度来看，git有以下功能：" class="headerlink" title="从一般开发者的角度来看，git有以下功能："></a>从一般开发者的角度来看，git有以下功能：</h3><ul><li>从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。</li><li>在自己的机器上根据不同的开发目的，创建分支，修改代码。</li><li>在单机上自己创建的分支上提交代码。</li><li>在单机上合并分支。</li><li>把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。</li><li>生成补丁（patch），把补丁发送给主开发者。</li><li>看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。</li><li>一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</li></ul><h3 id="从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能："><a href="#从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能：" class="headerlink" title="从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能："></a>从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能：</h3><ul><li>查看邮件或者通过其它方式查看一般开发者的提交状态。</li><li>打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。</li><li>向公共服务器提交结果，然后通知所有开发人员。 </li></ul><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul><li><p>SVN属于集中化的版本控制系统，有个不太精确的比喻:SVN = 版本控制+ 备份服务器<br> SVN使用起来有点像是档案仓库的感觉，支持并行读写文件，支持代码的版本化管理，功能包括取出、导入、更新、分支、改名、还原、合并等。</p><p>Git是一个分布式版本控制系统，操作命令包括：clone，pull，push,branch ,merge ,push,rebase，Git擅长的是程序代码的版本化管理。</p></li><li><p>GIT跟SVN一样有自己的集中式版本库或服务器。但，GIT更倾向于被使用于分布式模式，也就是每个开发人员从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。可以这样说，如果你被困在一个不能连接网络的地方时，就像在飞机上，地下室，电梯里等，你仍然能够提交文件，查看历史版本记录，创建项目分支，等。对一些人来说，这好像没多大用处，但当你突然遇到没有网络的环境时，这个将解决你的大麻烦。</p></li><li><p>GIT把内容按元数据方式存储，而SVN是按文件<br>所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。如果你把.git目录的体积大小跟.svn比较，你会发现它们差距很大。因为,.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。</p></li><li><p>分支在SVN中一点不特别，就是版本库中的另外的一个目录。如果你想知道是否合并了一个分支，你需要手工运行像这样的命令svn propget svn:mergeinfo，来确认代码是否被合并。然而，处理GIT的分支却是相当的简单和有趣。你可以从同一个工作目录下快速的在几个分支间切换。你很容易发现未被合并的分支，你能简单而快捷的合并这些文件。</p></li><li><p>GIT没有一个全局的版本号，而SVN有<br>目前为止这是跟SVN相比GIT缺少的最大的一个特征。你也知道，SVN的版本号实际是任何一个相应时间的源代码快照。我认为它是从CVS进化到SVN的最大的一个突破。因为GIT和SVN从概念上就不同，我不知道GIT里是什么特征与之对应。如果你有任何的线索，请在评论里奉献出来与大家共享。</p></li><li><p>GIT的内容完整性要优于SVN：<br>GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 </p></li></ul><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><h2 id="SVN-的优缺点"><a href="#SVN-的优缺点" class="headerlink" title="SVN 的优缺点"></a>SVN 的优缺点</h2><p>SVN对中文支持好，操作简单，使用没有难度，美工人员，产品人员，测试人员，实施人员都可轻松上手。使用界面统一，功能完善，操作方便。</p><h2 id="Git的优缺点"><a href="#Git的优缺点" class="headerlink" title="Git的优缺点"></a>Git的优缺点</h2><p>对程序源代码进行差异化的版本管理，代码库占极少的空间。易于代码的分支化管理。不支持中文，图形界面支持差，使用难度大。不易推广。<br>适用范围：<br><span id="inline-toc">1</span>适用对象不同。Git适用于参与开源项目的开发者。他们由于水平高，更在乎的是效率而不是易用性。SVN则不同，它适合普通的公司开发团队。使用起来更加容易。</p><p><span id="inline-toc">2</span>使用的场合不同。Git适用于通过Internet，有多个开发角色的单个项目开发，SVN适合企业内部由项目经理统一协调的多个并行项目的开发。</p><p><span id="inline-toc">3</span>权限管理策略不同。Git没有严格的权限管理控制，只要有帐号，就可以导出、导入代码，甚至执行回退操作。SVN则有严格的权限管理，可以按组、按个人进行针对某个子目录的权限控制。区分读、写权限。更严格的，不支持回退操作。保证代码永远可以追踪。</p><p><span id="inline-toc">4</span>分支(branch)的使用范围不一样。Git中，你只能针对整个仓库作branch,而且一旦删除，便无法恢复。而SVN中，branch可以针对任何子目录，它本质上是一个拷贝操作。所以，可以建立非常多、层次性的branch,并且，在不需要时将其删除，而以后需要时只要checkout老的SVN版本就可以了。</p><p><span id="inline-toc">5</span>基于第三点，Git适用于单纯的软件项目，典型的就是一些开源项目，比如Linux内核、busybox等。相反，SVN擅长多项目管理。比如，你可以在一个SVN仓库中存放一个手机项目的bsp/设计文档/文件系统/应用程序/自动化编译脚本，或者在一个SVN中存放5款手机项目的文件系统。git中必须建立n(项目数)*m（组件数）个仓库。SVN中只需要最多n或者m个就可以了。</p><p><span id="inline-toc">6</span>Git使用128位ID作为版本号，而且checkout时要注明是哪个branch,而SVN使用一个递增的序列号作为全局唯一的版本号，更加简明易懂。虽然可以使用gittag来建立一些文字化的别名，但是毕竟那只是针对特殊版本。</p><p><span id="inline-toc">7</span>可跟踪性，git的典型开发过程为：建立分支，进行开发，提交到本地master，删除分支。这样做的后果是以前的修改细节会丢失。而在SVN下做同样的事情，不会丢失任何细节。这里是一个有趣的链接，表明了git下典型的工作方式：（以master为核心，不断创建新branch,删除旧branch):</p><p><span id="inline-toc">8</span>局部更新，局部还原。SVN由于是在每个文件夹建立一个.svn文件夹来实现管理，所以可以很简单实现局部更新或者还原。假如你只希望更新某些部分，则svn可以很好实现。同时代码写错了，同时可以很好实现局部还原，当然git也可以通过历史版本还原，但是无法简单地实现局部还原。</p><p>SVN属于集中化的版本控制系统<br>这种做法带来了许多好处，特别是相较于老式的本地VCS来说。现在，每个人都可以一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限。<br>事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的单点故障。若是宕机一小时，那么在这一小时内，谁都无法提交更新、还原、对比等，也就无法协同工作。如果中央服务器的磁盘发生故障，并且没做过备份或者备份得不够及时的话，还会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录，被客户端提取出来的某些快照数据除外，但这样的话依然是个问题，你不能保证所有的数据都已经有人提取出来。<br>Subversion原理上只关心文件内容的具体差异。每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容。</p><h1 id="Subversion的特点概括起来主要由以下几条："><a href="#Subversion的特点概括起来主要由以下几条：" class="headerlink" title="Subversion的特点概括起来主要由以下几条："></a>Subversion的特点概括起来主要由以下几条：</h1><p><span id="inline-toc">1</span>每个版本库有唯一的URL（官方地址），每个用户都从这个地址获取代码和数据；<br><span id="inline-toc">2</span>获取代码的更新，也只能连接到这个唯一的版本库，同步以取得最新数据；<br><span id="inline-toc">3</span>提交必须有网络连接（非本地版本库）；<br><span id="inline-toc">4</span>提交需要授权，如果没有写权限，提交会失败；<br><span id="inline-toc">5</span>提交并非每次都能够成功。如果有其他人先于你提交，会提示“改动基于过时的版本，先更新再提交”… 诸如此类；<br><span id="inline-toc">6</span>冲突解决是一个提交速度的竞赛：手快者，先提交，平安无事；手慢者，后提交，可能遇到麻烦的冲突解决。</p><h1 id="Git属于分布式的版本控制系统"><a href="#Git属于分布式的版本控制系统" class="headerlink" title="Git属于分布式的版本控制系统"></a>Git属于分布式的版本控制系统</h1><p>自2005年诞生于以来，Git日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目，它还有着令人难以置信的非线性分支管理系统，可以应付各种复杂的项目开发需求。<br>与SVN不同，Git记录版本历史只关心文件数据的整体是否发生变化。Git并不保存文件内容前后变化的差异数据。实际上，Git更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git不会再次保存，而只对上次保存的快照作一连接。</p>]]></content>
    
    <summary type="html">
    
      SVN是Subversion的简称，是一个开放源代码的版本控制系统,支持大多数常见的操作系统。作为一个开源的版本控制系统,Subversion管理着随时间改变的数据。
    
    </summary>
    
      <category term="github-svn" scheme="https://github.com/annkee/categories/github-svn/"/>
    
    
      <category term="github" scheme="https://github.com/annkee/tags/github/"/>
    
      <category term="svn" scheme="https://github.com/annkee/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>闲整</title>
    <link href="https://github.com/annkee/2018/06/16/thank/"/>
    <id>https://github.com/annkee/2018/06/16/thank/</id>
    <published>2018-06-15T16:00:00.000Z</published>
    <updated>2019-07-08T10:38:41.220Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/thank.jpg" alt="👍" style="width: 100%"><br><a id="more"></a></p><p>今天终于可以把博客重新翻新一遍了，之前的next主题的配置不是那么好看，自己有有强迫症。所以重新在网上学习了一遍相关配置，同时也借鉴的很多大佬的博文，也收藏了很多文章，从中获益不少，有的文章甚至看了好几次才看出来，可能是我有点笨笨滴吧😝。不过还好坚持下来了，也做到了自己认为比较好的结果。</p><p><strong>写一句话来激励自己：You’re far more powerful than you think ✊.</strong></p><p><strong>优质大佬博客推荐阅读：</strong></p><ul><li><a href="https://reuixiy.github.io" target="_blank" rel="noopener">https://reuixiy.github.io</a></li><li><a href="http://cherryblog.site" target="_blank" rel="noopener">http://cherryblog.site</a></li><li><a href="http://xiaweizi.cn" target="_blank" rel="noopener">http://xiaweizi.cn</a></li><li><a href="https://notes.wanghao.work" target="_blank" rel="noopener">https://notes.wanghao.work</a></li></ul><p><strong>本人简书和掘金地址，后续会不断推出优质文章：</strong></p><ul><li><a href="https://www.jianshu.com/u/6da361269696" target="_blank" rel="noopener">https://www.jianshu.com/u/6da361269696</a></li><li><a href="https://juejin.im/user/59b55715f265da064d3454a5" target="_blank" rel="noopener">https://juejin.im/user/59b55715f265da064d3454a5</a></li></ul>]]></content>
    
    <summary type="html">
    
      You&#39;re far more powerful than you think ✊.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo增加live2d看板宠物动画</title>
    <link href="https://github.com/annkee/2018/06/12/live2d/"/>
    <id>https://github.com/annkee/2018/06/12/live2d/</id>
    <published>2018-06-11T16:00:00.000Z</published>
    <updated>2019-07-08T10:37:56.819Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/aa.jpg" alt="live2d" style="width: 100%"></p><a id="more"></a><h1 id="首先贴出官网代码"><a href="#首先贴出官网代码" class="headerlink" title="首先贴出官网代码"></a>首先贴出官网代码</h1><p>官网地址配置：<a href="https://www.npmjs.com/package/hexo-helper-live2d" target="_blank" rel="noopener">https://www.npmjs.com/package/hexo-helper-live2d</a></p><h1 id="按如下步骤执行"><a href="#按如下步骤执行" class="headerlink" title="按如下步骤执行"></a>按如下步骤执行</h1><p>1️⃣  首先检查博客主目录下面的  <code>package.json</code>里是否有<br> <code>&quot;hexo-helper-live2d&quot;: &quot;^3.0.3&quot;,</code>依赖，有的话可以先卸载<br>使用命令：<code>npm uninstall hexo-helper-live2d</code><br>之后再安装：<code>npm install --save hexo-helper-live2d</code></p><div class="note warning"><p>命令都是在你的博客主目录执行</p></div><p><img src="https://user-gold-cdn.xitu.io/2018/7/10/164836d07332f0c5?w=630&amp;h=201&amp;f=png&amp;s=6823" alt="我的博客目录结构：d:/github/blog"><br>安装完成之后在<code>package.json</code>会看到安装的model<br><img src="https://user-gold-cdn.xitu.io/2018/7/10/164836d0b5bc9b71?w=607&amp;h=559&amp;f=png&amp;s=11960" alt="package.json依赖"><br>此时再去 <code>node_moduels</code>目录下，可以看到有如下文件夹，这些都是动画主配置<br><img src="https://user-gold-cdn.xitu.io/2018/7/10/164836d1089cbfcb?w=699&amp;h=362&amp;f=png&amp;s=38850" alt="node_modules目录"><br>2️⃣ 下载各种动画model：<br>地址：<a href="https://github.com/xiazeyu/live2d-widget-models.git">https://github.com/xiazeyu/live2d-widget-models.git</a></p><p>3️⃣ 下载好之后将packages里的所有动画模板拷贝到博客的node_modules目录里<br><img src="https://user-gold-cdn.xitu.io/2018/7/10/164836d12173b370?w=1240&amp;h=823&amp;f=png&amp;s=225630" alt="packages目录"></p><p>4️⃣ 配置博客站点配置文件，_config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-epsilon2_1  #模板目录，在node_modules里</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150 </span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: false  #是否在手机进行显示</span><br></pre></td></tr></table></figure></p><p>5️⃣ 开始部署<br>当使用<code>hexo clean</code>或者 <code>hexo g</code>命令的时候，这时候就可以看到如下日志了<br><img src="https://user-gold-cdn.xitu.io/2018/7/10/164836d121821492?w=894&amp;h=151&amp;f=png&amp;s=7264" alt="构建日志"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  HEXO-HELPER-LIVE2D: Loaded model from npm-module(1), live2d-widget-model-epsilon2_1@1.0.5 from &apos;D:\github\blog\node_modules\live2d-widget-model-epsilon2_1\assets&apos;</span><br></pre></td></tr></table></figure></p><p>说明已经加载到了配置的动画模板，到此就完成了。</p><h1 id="原创，转载请注明出处。"><a href="#原创，转载请注明出处。" class="headerlink" title="原创，转载请注明出处。"></a>原创，转载请注明出处。</h1><h3 id="推荐阅读："><a href="#推荐阅读：" class="headerlink" title="推荐阅读："></a>推荐阅读：</h3><ul><li><a href="https://juejin.im/user/59b55715f265da064d3454a5" target="_blank" rel="noopener">https://juejin.im/user/59b55715f265da064d3454a5</a></li><li><a href="https://www.jianshu.com/u/6da361269696" target="_blank" rel="noopener">https://www.jianshu.com/u/6da361269696</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/aa.jpg&quot; alt=&quot;live2d&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://github.com/annkee/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://github.com/annkee/tags/hexo/"/>
    
      <category term="live2d" scheme="https://github.com/annkee/tags/live2d/"/>
    
  </entry>
  
  <entry>
    <title>github配置ssh</title>
    <link href="https://github.com/annkee/2018/04/12/github-ssh/"/>
    <id>https://github.com/annkee/2018/04/12/github-ssh/</id>
    <published>2018-04-11T16:00:00.000Z</published>
    <updated>2019-07-08T10:37:11.129Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/5841000-bbe9448274a8f8e9.jpg" alt="github" style="width: 100%"></p><a id="more"></a><h1 id="git命令窗口输入"><a href="#git命令窗口输入" class="headerlink" title="git命令窗口输入"></a>git命令窗口输入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;wangan058&quot;</span><br><span class="line">$ git config --global user.email &quot;wangan058@163.com&quot;</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;wangan058@163.com&quot;</span><br></pre></td></tr></table></figure><p>然后生成一个C:\Users\annkee(你的用户目录)\.ssh路径，打开id_rsa.pub文件，复制全部粘贴到远端的github上的ssh key 里面。</p><p>测试：<br><code>$ ssh -T git@github.com</code></p><p>出现:<code>Hi annkee! You&#39;ve successfully authenticated, but GitHub does not provide shell access.sh</code> 说明正常</p><h1 id="在你init过的路径下进入“-git目录”，打开“config”文件，修改url为："><a href="#在你init过的路径下进入“-git目录”，打开“config”文件，修改url为：" class="headerlink" title="在你init过的路径下进入“.git目录”，打开“config”文件，修改url为："></a>在你init过的路径下进入“.git目录”，打开“config”文件，修改url为：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = git@github.com:annkee/mobile-scm.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure><p>把<code>https://github.com/</code> 替换为 <a href="mailto:git@github.com">git@github.com</a>: 就行了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/5841000-bbe9448274a8f8e9.jpg&quot; alt=&quot;github&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="github" scheme="https://github.com/annkee/categories/github/"/>
    
    
      <category term="github" scheme="https://github.com/annkee/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>架构、框架、模式、模块、组件、插件、控件、中间件的含义和区别</title>
    <link href="https://github.com/annkee/2018/04/05/diff/"/>
    <id>https://github.com/annkee/2018/04/05/diff/</id>
    <published>2018-04-04T16:00:00.000Z</published>
    <updated>2019-07-08T10:37:02.504Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/5841000-66fc843a2242e308.jpg" alt="软件架构" style="width: 100%"></p><a id="more"></a><h1 id="软件架构（architecture）"><a href="#软件架构（architecture）" class="headerlink" title="软件架构（architecture）"></a>软件架构（architecture）</h1><p><strong>英文</strong>：Architecture is the art of planning, designing, and constructing buildings.<br><strong>中文</strong>：软件架构，也称为软件体系结构。简单地说，软件架构就是一个蓝图，是一种设计方案，将客户的不同需求抽象成为抽象组件，并且能够描述这些抽象组件之间的通信和调用。它是对软件系统的系统组织，是对构成系统的构件的接口，行为模式，协作关系等体系问题的决策总和。它不仅涉及到结构与行为，而且还涉及到系统的使用，功能，性能，适应性，重用性，可理解性，经济性和技术约束的权衡和美学考虑。 使用方法：软件架构会分析工程中的问题，针对问题设计解决方案，针对解决方案分析应具有的功能，针对功能设计软件系统的层次和模块及层次模块之间的逻辑交互关系，确定各个功能如何由这些逻辑实现。工程开发者，可以根据软件架构中分析出来的层次和模块进行软件的编写。</p><h3 id="软件框架（framework）"><a href="#软件框架（framework）" class="headerlink" title="软件框架（framework）"></a>软件框架（framework）</h3><p><strong>英文</strong>：A framework is a structure that forms a support or frame for something. A structure is something that consists of parts connected together in an ordered way. A framework is a set of classes that embodies an abstract design for solutions to a family of related problems, and supports reuses at a larger granularity than classes.A software framework provides the skeleton of an application that can be customized by an application developer.<br><strong>中文</strong>：软件框架是项目软件开发过程中提取特定领域软件的共性部分形成的体系结构，不同领域的软件项目有着不同的框架类型。框架不是现成可用的应用系统，而是一个半成品，是一个提供了诸多服务，供开发人员进行二次开发，实现具体功能的应用系统。特别强调，框架是一个可供二次开发的程序实体。框架与架构关系 ：首先说框架不是架构，框架比架构更具体，更偏重于技术，而架构偏重于设计。还有一个关系就是架构可以通过多种框架来实现。另外，生活中说的“框架”跟软件术语中“框架”的意思不同，要注意区别。使用方法：特定领域软件有一些共性部分形成的软件架构，将这个共性的软件架构开发出来，形成一个可供二次开发的程序实体，这个程序实体就是软件框架。 可供二次开发。</p><h3 id="设计模式（pattern）"><a href="#设计模式（pattern）" class="headerlink" title="设计模式（pattern）"></a>设计模式（pattern）</h3><p><strong>英文</strong>：A pattern is the repeated or regular way in which something happens or is done. If you refer to a way of doing something, you are referring to how you can do it, for example, the action you can take or the method you can use to achieve it.<br><strong>中文</strong>：设计模式强调的是一个设计问题的解决方法，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。框架与设计模式关系 ：设计模式研究的是针对单一问题的设计思路和解决方法，一个模式可应用于不同的框架和被不同的程序语言所实现；而框架则是一个应用的体系结构，是一种或多种设计模式和代码的混合体。虽然它们有所不同，但却共同致力于使人们的设计可以被重用，在思想上存在着统一性的特点，因而设计模式的思想可以在框架设计中进行应用。架构与设计模式关系 ：两者的关系也是很好区分的，设计模式主要是针对单一问题的解决方法，范畴比较小，而架构是高层次的针对体系结构的一种设计思路，范畴比较大。可以这么说，一个架构中可能会出现多个设计模式来解决多个架构中的问题。使用方法：针对特定问题提供解决方案，以供问题解决者参考。</p><h3 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h3><p><strong>英文</strong>：In software, a module is a part of a program. Programs are composed of one or more independently developed modules that are not combined until the program is linked. A single module can contain one or several routines.A software module encapsulates related functions in a program together.one of a set of parts that can be connected or combined to build or complete something.<br><strong>中文</strong>：模块，module，模块是一个通用概念，可能从功能或其他目的来区分。模块可以是子系统子领域，主要取决于上下文环境的用法。通常我们会说程序模块，功能模块，这实际上是在按照不同的标准对模块的内容和范围的不同定义。2通常我们说的程序模块，是指的一段能够实现某个有价值目标的的成员代码段，这样的东西，我们还有另一个称呼：例程，而例程有两种，即函数和过程，它们都能实现一个有价值的目标供其它的模块使用。3而功能模块的说法一般在分析和设计阶段出现得比较频繁，通常我们用一个功能模块来说明一个功能所包含的系统行为，当我们觉得分析的颗粒度可能更大一些的时候我们可以用一个功能模块来表示一组功能的集合，这似乎让我们觉得，模块这个词的概念和“子系统”这个词的概念有些模糊，是的，事实上，有些大的模块会慢慢的让我们觉得称呼他们子系统更合适，或者一个子系统，我们会慢慢发现你还包含着一些模块。但是无论怎样，定义模块的原则应该是：高内聚和低耦合。4使用方法：就是一个描述全局中问题的概念，至于全局是什么，这个随便，比如一个人，可以看成各种功能系统，那么模块就是各种呼吸系统、消化系统等；可以看成社会关系，模块就有劳动能力、生产关系等，全在于怎么看了。</p><h3 id="组件（component）"><a href="#组件（component）" class="headerlink" title="组件（component）"></a>组件（component）</h3><p><strong>英文</strong>：The components of something are the parts that it is made of.<br><strong>中文</strong>：组件，Component，首先说，组件已经不是一个抽线的概念了，是封装了一个或多个实体程序模块的实体。2组件这个词通常是现在描述产品的时候出现，一个大的产品会有很多小的部分组成，而小的部分除了是一个大的组件的部分以外，自己可能还包含更小的组件，所以组件是递归的，那么组件到底是什么呢？最常见的组件就是我们已经写好的程序代码，任何一小段代码都可以是一个组件，它可以和其它代码段连接起来组成更大的一段程序代码，一个更大的组件，然后可能是一个函数，或者一个类程序单元，或者数个类单元文件的集成，当不同的组件的组装形成更大的组件时候，我们实际就是在做我们通常提到的一件事情：集成，软件中有很多集成工作要做，每日集成，重要版本集成等等，集成是什么呢？软件中，就是链编调试。这样一来，我们知道集成是需要对被集成的组件有规模要求的，换句话说，至少是一个单元文件，所以通常说到的组件就可以直观的理解为单元文件，或者可以组成软件的其他文件，以及编译后的文件。3组件是面向对象里面的一个重[chóng]用的概念，也称为构件，组件非常类似机械中构件概念，现在机械都是走向构件生成，通过不同构件组装成一个机械成品，软件目前也是这样的一个生成方式。4维基百科上说，组件之间通过接口进行交互，这个挺起来有些象插件，现实中也是这样，比如一个dll文件，可以说是插件，也可以说是组件。插件是是组件的一个子类，就是将组件中具有某些特点的组件归为插件，这些特点是：益于与系统分离，接口明晰，可以替换的程序模块。5组件强调的是封装，利用接口进行交互。因为封装有不同层次的封装，对应不同层次的接口，（比如将一个人封装成一个组件，比如国家主席，多个人封装成一个组合，比如中央的常委们），所以组件所表述的范围和层次也是多种多样的，在谈论组件的时候一定要分辨清楚谈论的层次和范围。层次是相对的。你说地球是整个世界，但是将地球放到银河系中，地球就显得渺小了；你说物质世界是整个世界，但是人类的精神世界也是无比的浩瀚；你说物质世界和精神世界合起来是整个世界，但是历史又是那么的神秘和真实；你说物质世界、精神世界、历史时空是整个世界，但是科学家又说人类可以探察的宇宙物质仅占全部宇宙的百分之四。6使用方法：就是一个描述系统中实体单元的概念。</p><h3 id="插件（plug-in）"><a href="#插件（plug-in）" class="headerlink" title="插件（plug-in）"></a>插件（plug-in）</h3><p><strong>英文</strong>：（addin，add-in，add-on，addon，app）A plug-in is something such as a piece of software that can be added to a computer system to give extra features or functions.<br><strong>中文</strong>：根据对组件和模块的分析，插件属于组件，而且还是一个程序模块，也是一个功能模块。插件是一种电脑程序，通过和应用程序的互动，来替应用程式增加一些特定的功能。 插件必须依赖于应用程序才能发挥自身功能，仅靠插件是无法正常运行的。2使用方法：满足一定接口规范的具有一定功能的程序模块。开发者可以在自己软件系统中设计相应的接口以匹配某个插件，也可以设计一定的接口规范，来让别人开发插件。插件和程序之间通过接口进行交互。</p><h3 id="控件（middleware）"><a href="#控件（middleware）" class="headerlink" title="控件（middleware）"></a>控件（middleware）</h3><p><strong>英文</strong>：A control is a device such as a switch or lever which you use in order to operate a machine or other piece of equipment.<br><strong>中文</strong>：可视化的组件。</p><h3 id="中间件（control）"><a href="#中间件（control）" class="headerlink" title="中间件（control）"></a>中间件（control）</h3><p><strong>英文</strong>：computer software that has an intermediary function between the various applications of a computer and its operating system.Middleware is computer software that provides services to software applications beyond those available from the operating system. It can be described as “software glue”.Middleware makes it easier for software developers to perform communication and input/output, so they can focus on the specific purpose of their application.<br><strong>中文</strong>：中间件是提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。</p><p>原文：<a href="http://blog.csdn.net/zhangyunfei_happy/article/details/47256245" target="_blank" rel="noopener">http://blog.csdn.net/zhangyunfei_happy/article/details/47256245</a></p>]]></content>
    
    <summary type="html">
    
      软件架构，也称为软件体系结构。简单地说，软件架构就是一个蓝图，是一种设计方案，将客户的不同需求抽象成为抽象组件，并且能够描述这些抽象组件之间的通信和调用。
    
    </summary>
    
      <category term="架构和组件等的区别" scheme="https://github.com/annkee/categories/%E6%9E%B6%E6%9E%84%E5%92%8C%E7%BB%84%E4%BB%B6%E7%AD%89%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    
    
      <category term="架构" scheme="https://github.com/annkee/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="组件" scheme="https://github.com/annkee/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>k8s简单了解</title>
    <link href="https://github.com/annkee/2018/04/05/k8s/"/>
    <id>https://github.com/annkee/2018/04/05/k8s/</id>
    <published>2018-04-04T16:00:00.000Z</published>
    <updated>2019-07-08T10:37:41.689Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/k8s.jpg" alt="k8s" style="width: 100%"></p><a id="more"></a><h1 id="pring-cloud项目集成docker配置"><a href="#pring-cloud项目集成docker配置" class="headerlink" title="pring cloud项目集成docker配置"></a>pring cloud项目集成docker配置</h1><h2 id="首先配置pom文件，如下："><a href="#首先配置pom文件，如下：" class="headerlink" title="首先配置pom文件，如下："></a>首先配置pom文件，如下：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.compo.arche.springcloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;eurekaserver&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1_base&lt;/version&gt;&lt;!-- 此处版本号包含大写字母可能会有问题 --&gt;</span><br><span class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;&lt;!-- jar包 --&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;parent&gt;  </span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  </span><br><span class="line">       &lt;artifactId&gt;spring-cloud-starter-parent&lt;/artifactId&gt;  </span><br><span class="line">       &lt;version&gt;Camden.SR7&lt;/version&gt;  </span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;docker.repostory&gt;192.168.8.0&lt;/docker.repostory&gt;&lt;!--  docker 服务器位置 --&gt;</span><br><span class="line">        &lt;docker.registry.name&gt;smartmall&lt;/docker.registry.name&gt;&lt;!-- 名称 --&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;dependencies&gt;          </span><br><span class="line">      &lt;dependency&gt;  </span><br><span class="line">          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;  </span><br><span class="line">          &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;  </span><br><span class="line">      &lt;/dependency&gt;  </span><br><span class="line">  &lt;/dependencies&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">    &lt;resource&gt;  </span><br><span class="line">            &lt;directory&gt;src/main/resources&lt;/directory&gt;  </span><br><span class="line">            &lt;filtering&gt;false&lt;/filtering&gt;  </span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src/main/docker&lt;/directory&gt;</span><br><span class="line">        &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">            &lt;include&gt;**/Dockerfile&lt;/include&gt;</span><br><span class="line">        &lt;/includes&gt;</span><br><span class="line">        &lt;targetPath&gt;../docker&lt;/targetPath&gt;</span><br><span class="line">    &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">        &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;0.4.13&lt;/version&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;build&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;serverId&gt;harbor&lt;/serverId&gt;</span><br><span class="line">                    &lt;registryUrl&gt;192.168.8.0&lt;/registryUrl&gt;</span><br><span class="line">                    &lt;pushImage&gt;true&lt;/pushImage&gt;</span><br><span class="line">                    &lt;dockerDirectory&gt;target/docker&lt;/dockerDirectory&gt;</span><br><span class="line">                     &lt;imageName&gt;</span><br><span class="line">                        $&#123;docker.repostory&#125;/$&#123;docker.registry.name&#125;/$&#123;project.artifactId&#125;:$&#123;project.version&#125;</span><br><span class="line">                    &lt;/imageName&gt;</span><br><span class="line">                    &lt;imageTags&gt;</span><br><span class="line">                        &lt;imageTag&gt;$&#123;project.version&#125;&lt;/imageTag&gt;</span><br><span class="line">                    &lt;/imageTags&gt;</span><br><span class="line">                    &lt;resources&gt;</span><br><span class="line">                        &lt;rescource&gt;</span><br><span class="line">                            &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                            &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                            &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">                        &lt;/rescource&gt;</span><br><span class="line">                    &lt;/resources&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="创建在main下面创建一个包名：docker，然后在docker包下创建文件：Dockerfile；注意-没有扩展名"><a href="#创建在main下面创建一个包名：docker，然后在docker包下创建文件：Dockerfile；注意-没有扩展名" class="headerlink" title="创建在main下面创建一个包名：docker，然后在docker包下创建文件：Dockerfile；注意-没有扩展名"></a>创建在main下面创建一个包名：docker，然后在docker包下创建文件：Dockerfile；注意-没有扩展名</h2><p>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FROM 192.168.8.0/smartmall/java:8u20</span><br><span class="line"></span><br><span class="line">MAINTAINER zzz vvv &quot;zzz@xxx.com&quot;</span><br><span class="line"></span><br><span class="line">ENV WORK_PATH /home/root</span><br><span class="line">ENV APP_NAME @project.build.finalName@.@project.packaging@</span><br><span class="line">ENV APP_VERSION @project.version@</span><br><span class="line"></span><br><span class="line">EXPOSE 9005</span><br><span class="line"></span><br><span class="line">COPY $APP_NAME $WORK_PATH/</span><br><span class="line"></span><br><span class="line">WORKDIR $WORK_PATH</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;]</span><br><span class="line"></span><br><span class="line">CMD [&quot;-jar&quot;, &quot;@project.build.finalName@.@project.packaging@&quot;]</span><br></pre></td></tr></table></figure></p><div class="note info"><p>EXPOSE 9005 是设置端口号</p></div><h3 id="spring-cloud项目集成docker上传项目到harbor构建的时候遇到的问题"><a href="#spring-cloud项目集成docker上传项目到harbor构建的时候遇到的问题" class="headerlink" title="spring cloud项目集成docker上传项目到harbor构建的时候遇到的问题"></a>spring cloud项目集成docker上传项目到harbor构建的时候遇到的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project order-micro: Compilation failure: Compilation failure:</span><br><span class="line">[ERROR] /root/.jenkins/workspace/smartmallordermicro/src/main/java/com/ctsig/order/base/aspect/WebLogAspect.java:[35,51] -source 1.6 中不支持 diamond 运算符</span><br><span class="line">[ERROR] (请使用 -source 7 或更高版本以启用 diamond 运算符)</span><br><span class="line">[ERROR] /root/.jenkins/workspace/smartmallordermicro/src/main/java/com/ctsig/order/base/config/MyBatisConfig.java:[54,56] -source 1.6 中不支持 diamond 运算符</span><br><span class="line">[ERROR] (请使用 -source 7 或更高版本以启用 diamond 运算符)</span><br><span class="line">[ERROR] /root/.jenkins/workspace/smartmallordermicro/src/main/java/com/ctsig/order/order/controller/PostInfo.java:[98,51] -source 1.6 中不支持 diamond 运算符</span><br><span class="line">[ERROR] (请使用 -source 7 或更高版本以启用 diamond 运算符)</span><br><span class="line">[ERROR] /root/.jenkins/workspace/smartmallordermicro/src/main/java/com/ctsig/order/base/config/DataSourceContextHolder.java:[7,80] -source 1.6 中不支持 diamond 运算符</span><br><span class="line">[ERROR] (请使用 -source 7 或更高版本以启用 diamond 运算符)</span><br><span class="line">[ERROR] -&gt; [Help 1]</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException</span><br></pre></td></tr></table></figure><p>这个问题主要是代码格式问题，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">错误写法：Map&lt;Object,Object&gt; dataSourceMap = new HashMap&lt;&gt;();//此处的“&lt;&gt;”里面没有设置Object</span><br><span class="line">正确写法：Map&lt;Object,Object&gt; dataSourceMap = new HashMap&lt;Object, Object&gt;();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/k8s.jpg&quot; alt=&quot;k8s&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://github.com/annkee/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://github.com/annkee/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>java反射</title>
    <link href="https://github.com/annkee/2017/07/13/java%E5%8F%8D%E5%B0%84/"/>
    <id>https://github.com/annkee/2017/07/13/java反射/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2019-07-08T10:37:36.833Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/fanshe.jpg" alt="反射" style="width: 100%"></p><a id="more"></a><h1 id="什么是Java反射机制-有什么用"><a href="#什么是Java反射机制-有什么用" class="headerlink" title="什么是Java反射机制?有什么用?"></a>什么是Java反射机制?有什么用?</h1><ul><li><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p></li><li><p>Java的反射机制它知道类的基本结构，这种对Java类结构探知的能力，我们称为Java类的“自审”。</p></li></ul><h1 id="Java反射机制主要提供了以下功能"><a href="#Java反射机制主要提供了以下功能" class="headerlink" title="Java反射机制主要提供了以下功能"></a>Java反射机制主要提供了以下功能</h1><p>在运行时判断任意一个对象所属的类；在运行时构造任意一个类的对象；在运行时判断任意一个类所具有的成员变量和方法；在运行时调用任意一个对象的方法；生成动态代理。<br>用实例 来说明</p><h2 id="class-类的使用：获取类的属性、方法、构造方法、类的相关信息"><a href="#class-类的使用：获取类的属性、方法、构造方法、类的相关信息" class="headerlink" title="class 类的使用：获取类的属性、方法、构造方法、类的相关信息"></a>class 类的使用：获取类的属性、方法、构造方法、类的相关信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">/** </span><br><span class="line"> *</span><br><span class="line"> * @author lijian </span><br><span class="line"> *class 类的使用：获取类的属性、方法、构造方法、类的相关信息 </span><br><span class="line"> */</span><br><span class="line">public class TestClass_1 &#123;</span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException &#123;  </span><br><span class="line"></span><br><span class="line">       //forName(String className)返回与带有给定字符串名的类或接口相关联的 Class 对象。  </span><br><span class="line">        Class clazz = Class.forName(&quot;java.lang.String&quot;);  </span><br><span class="line">       //getDeclaredFields();返回 Field 对象的一个数组，这些对象反映此 Class 对象所表示的类或接口所声明的所有字段，包括公共、保护、默认（包）访问和私有字段，但不包括继承的字段。  </span><br><span class="line">        Field[] field = clazz.getDeclaredFields();  </span><br><span class="line">        System.out.println(&quot;---------------------显示类的属性----------------------------&quot;);  </span><br><span class="line">        for (Field f : field) &#123;  </span><br><span class="line">            //getName()返回此 Field 对象表示的字段的名称  </span><br><span class="line">            //getType()返回一个 Class 对象，它标识了此 Field 对象所表示字段的声明类型。  </span><br><span class="line">            System.out.println(f.getName() + &quot;        &quot; + f.getType());  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;---------------------显示类的方法-----------------------------&quot;);  </span><br><span class="line">        //getDeclaredMethods() 返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。  </span><br><span class="line">        Method[] method = clazz.getDeclaredMethods();  </span><br><span class="line">        for (Method m : method) &#123;  </span><br><span class="line">            System.out.println(m.getName());  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;---------------------显示类的构造方法-----------------------------&quot;);  </span><br><span class="line">        //getDeclaredConstructors() 返回 Constructor 对象的一个数组，这些对象反映此 Class 对象表示的类声明的所有构造方法。  </span><br><span class="line">       Constructor[] constructors = clazz.getDeclaredConstructors();  </span><br><span class="line">       for(Constructor c:constructors)  </span><br><span class="line">       &#123;  </span><br><span class="line">           System.out.println(c);  </span><br><span class="line">       &#125;  </span><br><span class="line">      System.out.println(&quot;----------------------获取类的相关的信息----------------------------------------------&quot;);  </span><br><span class="line">      System.out.println(&quot;类所在的包为：&quot;+ clazz.getPackage().getName());  </span><br><span class="line">      System.out.println(&quot;类名：&quot;+ clazz.getName());  </span><br><span class="line">      System.out.println(&quot;父类的名称：&quot;+ clazz.getSuperclass().getName());  </span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下示例中会使用到User.java类，其代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;  </span><br><span class="line">  </span><br><span class="line">    private String name;  </span><br><span class="line">    private int age;  </span><br><span class="line">     </span><br><span class="line">    public User()&#123;&#125;  </span><br><span class="line">    public User(String name, int age) &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">属性的setter 和getter 方法 省略······</span><br></pre></td></tr></table></figure></p><h2 id="生成一个类的Class对象有一下四种方式"><a href="#生成一个类的Class对象有一下四种方式" class="headerlink" title="生成一个类的Class对象有一下四种方式"></a>生成一个类的Class对象有一下四种方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import entity.User;  </span><br><span class="line">  </span><br><span class="line">/** </span><br><span class="line"> *  </span><br><span class="line"> * @author lijian  </span><br><span class="line"> * 创建Class对象的4种方法 </span><br><span class="line"> */  </span><br><span class="line">public class TestClass_2 &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException &#123;  </span><br><span class="line">        User user = new User();  </span><br><span class="line">        // 第一种：对象.Class  </span><br><span class="line">        Class clazz = user.getClass();  </span><br><span class="line">        // 使用包装器获取Class 对象  </span><br><span class="line">        String str = &quot;asdasd&quot;;  </span><br><span class="line">        clazz = str.getClass();  </span><br><span class="line">        // 第二种 ：类.class  </span><br><span class="line">        clazz = User.class;  </span><br><span class="line">        clazz = String.class;  </span><br><span class="line">        clazz = Integer.class;  </span><br><span class="line">  </span><br><span class="line">        // 第三种：Class.forname();  </span><br><span class="line">        clazz = Class.forName(&quot;java.lang.String&quot;);  </span><br><span class="line">        clazz = Class.forName(&quot;java.lang.Long&quot;);  </span><br><span class="line">         </span><br><span class="line">        //第四种：包装类.type  </span><br><span class="line">        clazz = Integer.TYPE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用反射动态创建对象实例有两种方式："><a href="#使用反射动态创建对象实例有两种方式：" class="headerlink" title="使用反射动态创建对象实例有两种方式："></a>使用反射动态创建对象实例有两种方式：</h2><ul><li>通过Class的newInstance()方法<br>该方法要求该Class 对象的对应类有无参构造方法,执行newInstance()实际上就是执行无参构造方法来创建该类的实例</li><li>通过Constructor的newInstance() 方法<br>先使用Class对象获得指定的Constructor对象,再调用Constructor对象的newInstance()方法来创建该Class对象对应类的对象<br>通过该方法可以选择使用指定的构造方法来创建对象<br>两种方法写个简单的实例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;  </span><br><span class="line">import entity.User;  </span><br><span class="line">  </span><br><span class="line">/** </span><br><span class="line"> *  </span><br><span class="line"> * @author lijian </span><br><span class="line"> *  使用反射 动态创建对象  两种方式 </span><br><span class="line"> */  </span><br><span class="line">public class TestClass_3 &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        /** </span><br><span class="line">         * 方法1：通过Class的newInstance()方法 </span><br><span class="line">         *          该方法要求该Class对象的对应类有无参构造方法 </span><br><span class="line">         *              执行newInstance()实际上就是执行无参构造方法来创建该类的实例 </span><br><span class="line">         */  </span><br><span class="line">    //      Class  clazz = Class.forName(&quot;entity.User&quot;);  </span><br><span class="line">    //  Object obj =  clazz.newInstance();  </span><br><span class="line">          </span><br><span class="line">        /** </span><br><span class="line">         * 方法2：通过Constructor的newInstance()方法 </span><br><span class="line">         *             先使用Class对象获取指定的Constructor对象 </span><br><span class="line">         *             再调用Constructor对象的newInstance()方法来创建该Class对象对应类的对象 </span><br><span class="line">         *              通过该方法可选择使用指定构造方法来创建对象 </span><br><span class="line">         */  </span><br><span class="line">        Class clazz = Class.forName(&quot;entity.User&quot;);  </span><br><span class="line">        //指定有参的构造方法  </span><br><span class="line">        Constructor cons = clazz.getConstructor(new Class[] &#123;int.class,String.class,String.class&#125;);  </span><br><span class="line">        //使用有参数的构造方法实例对象  </span><br><span class="line">                Object obj = cons.newInstance(new Object[]&#123;1,&quot;scott&quot;,&quot;1234&quot;&#125;);  </span><br><span class="line">                //转换为实际操作类  </span><br><span class="line">                User user = (User)obj;  </span><br><span class="line">  </span><br><span class="line">                //也可以调用无参构造方法，比第一种方法复杂  </span><br><span class="line">                obj = clazz.getConstructor(new Class[]&#123;&#125;).newInstance(new Object[]&#123;&#125;);  </span><br><span class="line">                user = (User)obj;  </span><br><span class="line">                //以下也可以调用无参构造方法  </span><br><span class="line">                obj = clazz.getConstructor().newInstance();  </span><br><span class="line">                //转换为实际操作类  </span><br><span class="line">                 user = (User)obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用反射动态修改查询的属性值"><a href="#使用反射动态修改查询的属性值" class="headerlink" title="使用反射动态修改查询的属性值"></a>使用反射动态修改查询的属性值</h2><p>通过Class对象的getFields() 或者getField()方法可以获得该类所包括的全部Field属性或指定Filed属性。Field类提供了以下方法来方法访问属性</p><p>getXxx(Object   obj) ：获取obj对象该Field的属性值。此处的Xxx对应8个基本数据类型，如果该属性类型是引用类型则直接使用get(Objectobj)<br>setXxx(Object obj,Xxx val) ：将obj对象的该Field赋值val。此处的Xxx对应8个基本数据类型，如果该属性类型是引用类型则直接使用set(Objectobj, Object val)<br>setAccessible(Boolean flag)：若flag为true，则取消属性的访问权限控制，即使private属性也可以进行访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">  </span><br><span class="line">/** </span><br><span class="line"> *  </span><br><span class="line"> * @author lijian </span><br><span class="line"> *    使用反射动态修改查询属性值 </span><br><span class="line"> */  </span><br><span class="line">public class TestClass_4 &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Class clazz = Class.forName(&quot;entity.User&quot;);  </span><br><span class="line">        Object obj = clazz.newInstance();//获得类的实例  </span><br><span class="line">        //获得 User 类中的指定属性对应的Field对象（每个属性对应一个Field对象）  </span><br><span class="line">        Field field = clazz.getDeclaredField(&quot;name&quot;);  </span><br><span class="line">          </span><br><span class="line">        //取消属性的访问权限控制，即使private 属性也可以进行访问  </span><br><span class="line">        field.setAccessible(true);  </span><br><span class="line">        //调用 getter 方法获取属性值  </span><br><span class="line">        System.out.println(field.get(obj));  </span><br><span class="line">        //调用setter 方法给属性赋值  </span><br><span class="line">        field.set(obj, &quot;scott&quot;);  </span><br><span class="line">        //调用 getter 方法获取对应属性修改后的值  </span><br><span class="line">        System.out.println(field.get(obj));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用反射动态执行方法"><a href="#使用反射动态执行方法" class="headerlink" title="使用反射动态执行方法"></a>使用反射动态执行方法</h2><ul><li>通过Class对象的getMethods()方法可以获得该类所包括的全部方法，返回值是Method[]</li><li>通过Class对象的getMethod() 方法可以获得该类所包括的执行方法，返回值是Method,每个Method对象对应一个方法，获得Method对象后，可以调用其invoke()来调用对应方法<br>Objectinvoke(Object obj , Object [] args):   obj代表当前方法所属的对象的名字，<br>args代表当前方法的参数列表，返回值Object是当前方法的返回值，即执行当前方法的结果。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Method;  </span><br><span class="line">import entity.User;  </span><br><span class="line">  </span><br><span class="line">/** </span><br><span class="line"> *  </span><br><span class="line"> * @author lijian </span><br><span class="line"> *  使用反射动态执行方法 </span><br><span class="line"> */  </span><br><span class="line">public class TestClass_5 &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) throws Exception&#123;  </span><br><span class="line">          </span><br><span class="line">        Class clazz = User.class;  </span><br><span class="line">        Object obj = clazz.newInstance();  </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">        //调用该对象的 setName方法  </span><br><span class="line">        Method method = clazz.getMethod(&quot;setName&quot;, new Class[]&#123;String.class&#125;);  </span><br><span class="line">        Object result =method.invoke(obj, new Object[]&#123;&quot;scott&quot;&#125;);       //  obj.setName(&quot;scott&quot;);  </span><br><span class="line">        System.out.println(&quot;返回值为：&quot;+result);  </span><br><span class="line">          </span><br><span class="line">        //调用对象的getName()方法  </span><br><span class="line">        Method method1 = clazz.getMethod(&quot;getName&quot;, new Class[]&#123;&#125;);  </span><br><span class="line">        Object obj1 = method1.invoke(obj, new Object[]&#123;&#125;);  </span><br><span class="line">        System.out.println(&quot;返回值为：&quot;+obj1);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用反射动态创建数组并存取元素"><a href="#使用反射动态创建数组并存取元素" class="headerlink" title="使用反射动态创建数组并存取元素"></a>使用反射动态创建数组并存取元素</h2><p>在java.lang.reflect包下提供了Array类，包括一系列static方法，通过这些方法可动态的创建数组、给元素赋值、取出元素值等</p><p>Array提供的主要方法如下：</p><ul><li>static ObjectnewInstance(Class&lt;?&gt; componentType, int[] dim) ：创建一个具有指定的组件类型和维度的新数组</li><li>static void setXxx(Objectarray, int index ，xxx val)：给数组对象array中第index个元素赋值val</li><li>static xxx getXxx(Objectarray, int index)：以 xxx形式返回指定数组对象array中第index个元素值</li></ul><p>1️⃣ 动态创建一维数组，并给数组赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Array;  </span><br><span class="line">  </span><br><span class="line">/** </span><br><span class="line"> *  </span><br><span class="line"> * @author lijian </span><br><span class="line"> *  动态创建一维数组，并给数组赋值： </span><br><span class="line"> */  </span><br><span class="line">public class TestClass_6 &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) throws Exception  &#123;     </span><br><span class="line">          Class clazz = Class.forName(&quot;java.lang.Integer&quot;);  </span><br><span class="line">          Object array = Array.newInstance(clazz, 10);//根据类的class 创建大小为10的数组  </span><br><span class="line">          Array.set(array, 5, 10);//给数组的第5个元素赋值为10  </span><br><span class="line">          Object el = Array.get(array, 5);//取出数组的第5个元素值显示  </span><br><span class="line">          System.out.println(el);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2️⃣ 动态创建二维数组，并给数组赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.reflect.Array;  </span><br><span class="line">  </span><br><span class="line">/** </span><br><span class="line"> *  </span><br><span class="line"> * @author lijian </span><br><span class="line"> *动态创建二维数组，并给数组赋值： </span><br><span class="line"> */  </span><br><span class="line">public class TestClass_7 &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        int dims[] = &#123;10,15&#125;;  </span><br><span class="line">        Object  array = Array.newInstance(int.class, dims);//创建一个10行15列二维数组，等价与：array[10][15]  </span><br><span class="line">        Object  array1 = Array.get(array, 5);//获取二维数组中的第5行  </span><br><span class="line">        Array.set(array1, 8, 300);     //给数组的第5行8列赋值300，等价与：array[5][8]=300  </span><br><span class="line">        Object el = Array.get(array1, 8);//取出数组中第5行8列的值  </span><br><span class="line">        System.out.println(el);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Standard annotation type(Built-in annotation):@Override(when extends parent),@SuppressWarnings(wipe off the warnings)</li><li>Meta annotation type(decorate other annotation definition):@Target,@Retention</li><li>user-defined(define by oneself,it is an interface):use the key @interface to define</li></ul><p>for example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//define the annotation DBField</span><br><span class="line">package annotation</span><br><span class="line">import java.lang.Retention;</span><br><span class="line">import java.lang.Target;</span><br><span class="line">import java.lang.RetentionPolicy;</span><br><span class="line">import java.lang.ElementType;</span><br><span class="line"></span><br><span class="line">@Target(Element.Field)</span><br><span class="line">@Retention(RetentionPolicy.Runtime)</span><br><span class="line">public @interface DBField &#123;</span><br><span class="line"></span><br><span class="line">public String getDBField() default &quot;SQL&quot;;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">//DAO use the annotation</span><br><span class="line">package annotation;</span><br><span class="line">public class UserInfoDAO &#123;</span><br><span class="line"></span><br><span class="line">@DBFiled</span><br><span class="line">Object obj;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">//the result is SQL</span><br><span class="line">import annotation.DBField;</span><br><span class="line">public class TestAnnotation</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">     public static void main(String args[])&#123;</span><br><span class="line">     Class&lt;?&gt; alz = Class.forName(&quot;annotation.UserInfoDAO&quot;);</span><br><span class="line">          Field fields[] = clz.getDeclaredFields();</span><br><span class="line">                    for(Field f : fields)&#123;</span><br><span class="line">                              Systom.out.println(f.getName());</span><br><span class="line">                    Annotation[] annField=f.getAnnotations();</span><br><span class="line">                         if(annField[0] instanceof DBField)&#123;</span><br><span class="line">                              System.out.println(((DBField)annField[0]).getDBField())</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JAVA-反射-getGenericSuperclass（）介绍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  public class Person&lt;T&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  import java.lang.reflect.ParameterizedType;</span><br><span class="line">  import java.lang.reflect.Type;</span><br><span class="line">  </span><br><span class="line">  public class Student extends Person&lt;Student&gt; &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line"> Student st=new Student();</span><br><span class="line"> Class clazz=st.getClass();</span><br><span class="line"> //getSuperclass()获得该类的父类</span><br><span class="line"> System.out.println(clazz.getSuperclass());</span><br><span class="line"> //getGenericSuperclass()获得带有泛型的父类</span><br><span class="line"> //Type是 Java 编程语言中所有类型的公共高级接口。它们包括原始类型、参数化类型、数组类型、类型变量和基本类型。</span><br><span class="line"> Type type=clazz.getGenericSuperclass();</span><br><span class="line"> System.out.println(type);</span><br><span class="line"> //ParameterizedType参数化类型，即泛型</span><br><span class="line">  ParameterizedType p=(ParameterizedType)type;</span><br><span class="line"> //getActualTypeArguments获取参数化类型的数组，泛型可能有多个</span><br><span class="line">  Class c=(Class) p.getActualTypeArguments()[0];</span><br><span class="line"> System.out.println(c);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">打印结果：</span><br><span class="line"> </span><br><span class="line">class com.test.Person29 com.test.Person&lt;com.test.Student&gt;</span><br><span class="line">class com.test.Student</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/fanshe.jpg&quot; alt=&quot;反射&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="反射" scheme="https://github.com/annkee/categories/%E5%8F%8D%E5%B0%84/"/>
    
    
      <category term="反射" scheme="https://github.com/annkee/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://github.com/annkee/2017/06/16/design-pattern/"/>
    <id>https://github.com/annkee/2017/06/16/design-pattern/</id>
    <published>2017-06-15T16:00:00.000Z</published>
    <updated>2019-07-08T10:36:31.535Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/5841000-e066a6d8874a59af.jpg" alt="设计模式" style="width: 100%"></p><a id="more"></a><h1 id="单利模式"><a href="#单利模式" class="headerlink" title="单利模式"></a>单利模式</h1><p>Singleton 模式主要作用是保证在 Java 应用程序中，一个类 Class 只有一个实例存在。 一般 Singleton 模式通常有几种种形式</p><h3 id="第一种形式"><a href="#第一种形式" class="headerlink" title="第一种形式"></a>第一种形式</h3><p>定义一个类，它的 构造函数为 private 的，它 有一个 static 的 private 的该类变量，在 类初始化时实例话，通过一个 public 的 getInstance 方法获取对它的 引用,继而调用其中的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">private Singleton()&#123;&#125;</span><br><span class="line">//在自己内部定义自己一个实例，是不是很奇怪？ </span><br><span class="line">//注意这是 private 只供内部调用</span><br><span class="line">private static Singleton instance = new Singleton();</span><br><span class="line">//这里提供了一个供外部访问本 class 的静态方法，可以直接访问 </span><br><span class="line">public static Singleton getInstance() &#123;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第二种形式"><a href="#第二种形式" class="headerlink" title="第二种形式"></a>第二种形式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">private static Singleton instance = null;</span><br><span class="line">public static synchronized Singleton getInstance() &#123; </span><br><span class="line">//这个方法比上面有所改进，不用每次都进行生成对象，只是第一次 </span><br><span class="line">//使用时生成实例，提高了效率！</span><br><span class="line">if (instance==null)&#123;</span><br><span class="line">instance＝new Singleton();   &#125;</span><br><span class="line">return instance; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他形式"><a href="#其他形式" class="headerlink" title="其他形式"></a>其他形式</h3><p>定义一个类，它的构造函数为 private 的，所有方法为 static 的。一般认为第一种形式要更加安全些</p><ul><li>spring 单例模式和非单例模式测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;singleton&quot; class=&quot;java.util.Date&quot; scope=&quot;singleton&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;prototype&quot; class=&quot;java.util.Date&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">package test;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">import com.opensymphony.xwork2.ActionContext;</span><br><span class="line"></span><br><span class="line">public class TestScope &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       ApplicationContext context=new ClassPathXmlApplicationContext(&quot;applicationContext-web.xml&quot;);</span><br><span class="line"></span><br><span class="line">       Date s1=(Date)context.getBean(&quot;singleton&quot;);</span><br><span class="line">       Date p1=(Date)context.getBean(&quot;prototype&quot;);</span><br><span class="line"></span><br><span class="line">       Date s2=(Date)context.getBean(&quot;singleton&quot;);</span><br><span class="line">       Date p2=(Date)context.getBean(&quot;prototype&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       System.out.println(&quot;单例：&quot;+(s1==s2));</span><br><span class="line">       System.out.println(&quot;非单例：&quot;+(p1==p2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单例：true</span><br><span class="line">非单例：false</span><br></pre></td></tr></table></figure><h1 id="装饰器模式和代理模式"><a href="#装饰器模式和代理模式" class="headerlink" title="装饰器模式和代理模式"></a>装饰器模式和代理模式</h1><p>装饰器模式和代理模式之间还是有很多差别的。装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。换句话说，用代理模式，代理类（proxy class）可以对它的客户隐藏一个对象的具体信息。因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。并且，当我们使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。<br>我们可以用另外一句话来总结这些差别：使用代理模式，代理和真实对象之间的的关系通常在编译时就已经确定了，而装饰者能够在运行时递归地被构造。 </p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Proxy implements Subject&#123;</span><br><span class="line"></span><br><span class="line">       private Subject subject;</span><br><span class="line">       public Proxy()&#123;</span><br><span class="line">             //关系在编译时确定</span><br><span class="line">            subject = new RealSubject();</span><br><span class="line">       &#125;</span><br><span class="line">       public void doAction()&#123;</span><br><span class="line">             ….</span><br><span class="line">             subject.doAction();</span><br><span class="line">             ….</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//代理的客户</span><br><span class="line">public class Client&#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">             //客户不知道代理委托了另一个对象</span><br><span class="line">             Subject subject = new Proxy();</span><br><span class="line">             …</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Decorator implements Component&#123;</span><br><span class="line">        private Component component;</span><br><span class="line">        public Decorator(Component component)&#123;</span><br><span class="line">            this.component = component</span><br><span class="line">        &#125;</span><br><span class="line">       public void operation()&#123;</span><br><span class="line">            …</span><br><span class="line">            component.operation();</span><br><span class="line">            …</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//装饰器的客户</span><br><span class="line">public class Client&#123;</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">            //客户指定了装饰者需要装饰的是哪一个类</span><br><span class="line">            Component component = new Decorator(new ConcreteComponent());</span><br><span class="line">            …</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html" target="_blank" rel="noopener">推荐阅读👉23种设计模式</a></p>]]></content>
    
    <summary type="html">
    
      设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。
    
    </summary>
    
      <category term="设计模式" scheme="https://github.com/annkee/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://github.com/annkee/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>restFul简介</title>
    <link href="https://github.com/annkee/2017/05/12/restFul/"/>
    <id>https://github.com/annkee/2017/05/12/restFul/</id>
    <published>2017-05-11T16:00:00.000Z</published>
    <updated>2019-07-08T10:38:16.948Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/rest.jpg" alt="restFul" style="width: 100%"></p><a id="more"></a><h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><p>1.使用标准的HTTP方法（create，delete）<br>2.无状态性：RESTful只要维护资源的状态，而不需要维护客户端的状态。对于它来说，每次请求都是全新的，它只需要针对本次请求作相应的操作，不需要将本次请求的相关信息记录下来以便用于后续来自相同客户端请求的处理。<br>3.多资源表示方式<br>由于REST是面向资源的，所以一个Web API旨在实现针对单一资源的操作。我们在前面已经说个，针对资源的基本操作唯CRUD而已，这是使我们可以为Web API定义标准接口成可能。所谓的标准接口就是针对不同资源的Web API定义一致性的操作来操作它们，其接口可以采用类似于下面的模式。 </p><pre><code>public class ResourceService  {      public IEnumerable&lt;Resource&gt;[] Get();    public void Create(Resource resource);   public void Update(Resource resource);    public void Delete(string id);}</code></pre><p>比如我们分别发送PUT和POST请求以添加一个员工，标识员工的URI由其员工ID来决定。如果员工ID由客户端来指定，我们可以发送PUT请求；如果员工ID由服务端生成，我们一般发送POST请求。具体的请求与下面提供的代码片断类似，可以看出它们的URI也是不一样的。</p><pre><code>PUT http://www.artech.com/employees/300357 HTTP/1.1 ...  &lt;employee&gt;    &lt;id&gt;300357&lt;/id&gt;    &lt;name&gt;张三&lt;/name&gt;   &lt;gender&gt;男&lt;gender&gt;  &lt;birthdate&gt;1981-08-24&lt;/birthdate&gt;   &lt;department&gt;3041&lt;/department&gt;&lt;/employee&gt;POST http://www.artech.com/employees HTTP/1.1... &lt;employee&gt;    &lt;name&gt;张三&lt;/name&gt;   &lt;gender&gt;男&lt;gender&gt;  &lt;birthdate&gt;1981-08-24&lt;/birthdate&gt;   &lt;department&gt;3041&lt;/department&gt; &lt;/employee&gt;</code></pre><p>POST和PUT请求一般将所加资源的内容置于请求的主体。但是对于PUT请求来说，如果添加资源的内容完全可以由其URI来提供，这样的请求可以不需要主体。比如我们通过请求添加一个用于控制权限的角色，标识添加角色的URI由其角色名称来决定，并且不需要指定除角色名称的其它信息，那么我们只要发送如下一个不含主体的PUT请求即可。 </p><pre><code>PUT http://www.artech.com/roles/admin HTTP/1.1 ...</code></pre><p>除了进行资源的添加，PUT请求还能用于资源的修改。由于请求包含提交资源的标识（可以放在URI中，也可以置于保存在主体部分的资源内容中），所以服务端能够定位到对应的资源予以修改。对于POST和PUT，也存在一种一刀切的说法：POST用于添加，PUT用于修改。我个人比较认可的是：如果PUT提供的资源不存在，则做添加操作，否则做修改。</p><h3 id="webservice：Webservice是使应用程序以与平台和编程语言无关的方式进行相互通信技术。"><a href="#webservice：Webservice是使应用程序以与平台和编程语言无关的方式进行相互通信技术。" class="headerlink" title="webservice：Webservice是使应用程序以与平台和编程语言无关的方式进行相互通信技术。"></a>webservice：Webservice是使应用程序以与平台和编程语言无关的方式进行相互通信技术。</h3><h4 id="XML（标准通用标记语言下的一个子集）：XML是在web上传送结构化数据的伟大方式，Web-services要以一种可靠的自动的方式操作数据，HTML（标准通用标记语言下的一个应用）不会满足要求，而XML可以使web-services十分方便的处理数据，它的内容与表示的分离十分理想；"><a href="#XML（标准通用标记语言下的一个子集）：XML是在web上传送结构化数据的伟大方式，Web-services要以一种可靠的自动的方式操作数据，HTML（标准通用标记语言下的一个应用）不会满足要求，而XML可以使web-services十分方便的处理数据，它的内容与表示的分离十分理想；" class="headerlink" title="XML（标准通用标记语言下的一个子集）：XML是在web上传送结构化数据的伟大方式，Web services要以一种可靠的自动的方式操作数据，HTML（标准通用标记语言下的一个应用）不会满足要求，而XML可以使web services十分方便的处理数据，它的内容与表示的分离十分理想；"></a>XML（标准通用标记语言下的一个子集）：XML是在web上传送结构化数据的伟大方式，Web services要以一种可靠的自动的方式操作数据，HTML（标准通用标记语言下的一个应用）不会满足要求，而XML可以使web services十分方便的处理数据，它的内容与表示的分离十分理想；</h4><h1 id="SOAP：SOAP使用XML消息调用远程方法，这样web-services可以通过HTTP协议的post和get方法与远程机器交互，而且，SOAP更加健壮和灵活易用；"><a href="#SOAP：SOAP使用XML消息调用远程方法，这样web-services可以通过HTTP协议的post和get方法与远程机器交互，而且，SOAP更加健壮和灵活易用；" class="headerlink" title="SOAP：SOAP使用XML消息调用远程方法，这样web services可以通过HTTP协议的post和get方法与远程机器交互，而且，SOAP更加健壮和灵活易用；"></a>SOAP：SOAP使用XML消息调用远程方法，这样web services可以通过HTTP协议的post和get方法与远程机器交互，而且，SOAP更加健壮和灵活易用；</h1><p>其他像UDDI和WSDL技术与XML和SOAP技术紧密结合用于服务发现。<br>从表面上看，Web service 就是一个应用程序，它向外界暴露出一个能够通过Web进行调用的API。这就是说，你能够用编程的方法通过Web来调用这个应用程序。我们把调用这个Web service 的应用程序叫做客户。例如，你想创建一个Web service ，它的作用是返回当前的天气情况。那么你可以建立一个ASP页面，它接受邮政编码作为查询字符串，然后返回一个由逗号隔开的字符串，包含了当前的气温和天气。要调用这个ASP页面，客户端需要发送下面的这个HTTP GET<br>返回的数据就应该是这样：<br>这个ASP页面就应该可以算作是Web service 了。因为它基于HTTP GET请求，暴露出了一个可以通过Web调用的API。当然，Web service 还有更多的东西。<br>下面是对Web service 更精确的解释： Web services是建立可互操作的分布式应用程序的新平台。作为一个Windows程序员，你可能已经用COM或DCOM建立过基于组件的分布式应用程序。COM是一个非常好的组件技术，但是我们也很容易举出COM并不能满足要求的情况。<br>Web service平台是一套标准，它定义了应用程序如何在Web上实现互操作性。你可以用任何你喜欢的语言，在任何你喜欢的平台上写Web service ，只要我们可以通过Web service标准对这些服务进行查询和访问。</p><h1 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h1><p>Web Service平台需要一套协议来实现分布式应用程序的创建。任何平台都有它的数据表示方法和类型系统。要实现互操作性，Web Service平台必须提供一套标准的类型系统，用于沟通不同平台、编程语言和组件模型中的不同类型系统。这些协议有：</p><h1 id="XML和XSD"><a href="#XML和XSD" class="headerlink" title="XML和XSD"></a>XML和XSD</h1><p>可扩展的标记语言（标准通用标记语言下的一个子集）是Web Service平台中表示数据的基本格式。除了易于建立和易于分析外，XML主要的优点在于它既与平台无关，又与厂商无关。XML是由万维网协会(W3C)创建，W3C制定的XML SchemaXSD　定义了一套标准的数据类型，并给出了一种语言来扩展这套数据类型。<br>Web Service平台是用XSD来作为数据类型系统的。当你用某种语言如VB. NET或C#　来构造一个Web Service时，为了符合Web Service标准，所有你使用的数据类型都必须被转换为XSD类型。如想让它使用在不同平台和不同软件的不同组织间传递，还需要用某种东西将它包装起来。这种东西就是一种协议，如 SOAP。</p><h1 id="xml-web-service"><a href="#xml-web-service" class="headerlink" title="xml web service"></a>xml web service</h1><h2 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h2><p>SOAP即简单对象访问协议(Simple Object Access Protocol)，它是用于交换XML（标准通用标记语言下的一个子集）编码信息的轻量级协议。它有三个主要方面：XML-envelope为描述信息内容和如何处理内容定义了框架，将程序对象编码成为XML对象的规则，执行远程过程调用(RPC)的约定。SOAP可以运行在任何其他传输协议上。例如，你可以使用 SMTP，即因特网电子邮件协议来传递SOAP消息，这可是很有诱惑力的。在传输层之间的头是不同的，但XML有效负载保持相同。<br>Web Service 希望实现不同的系统之间能够用“软件-软件对话”的方式相互调用，打破了软件应用、网站和各种设备之间的格格不入的状态，实现“基于Web无缝集成”的目标。</p><h2 id="WSDL"><a href="#WSDL" class="headerlink" title="WSDL"></a>WSDL</h2><p>Web Service描述语言WSDL　就是用机器能阅读的方式提供的一个正式描述文档而基于XML（标准通用标记语言下的一个子集）的语言，用于描述Web Service及其函数、参数和返回值。因为是基于XML的，所以WSDL既是机器可阅读的，又是人可阅读的。<br>UDDI（Universal Description，Discovery，and Integration）：统一描述、发现和集成，用于集中存放和查找WSDL描述文件，起着目录服务器的作用。<br>UDDI 的目的是为电子商务建立标准；UDDI是一套基于Web的、分布式的、为Web Service提供的、信息注册中心的实现标准规范，同时也包含一组使企业能将自身提供的Web Service注册，以使别的企业能够发现的访问协议的实现标准。</p><h2 id="调用RPC与消息传递"><a href="#调用RPC与消息传递" class="headerlink" title="调用RPC与消息传递"></a>调用RPC与消息传递</h2><p>Web Service本身其实是在实现应用程序间的通信。我们有两种应用程序通信的方法：RPC远程过程调用　和消息传递。使用RPC的时候，客户端的概念是调用服务器上的远程过程，通常方式为实例化一个远程对象并调用其方法和属性。RPC系统试图达到一种位置上的透明性：服务器暴露出远程对象的接口，而客户端就好像在本地使用的这些对象的接口一样，这样就隐藏了底层的信息，客户端也就根本不需要知道对象是在哪台机器上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/rest.jpg&quot; alt=&quot;restFul&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="restFul" scheme="https://github.com/annkee/categories/restFul/"/>
    
    
      <category term="restFul" scheme="https://github.com/annkee/tags/restFul/"/>
    
  </entry>
  
  <entry>
    <title>webservice</title>
    <link href="https://github.com/annkee/2017/04/01/webservice/"/>
    <id>https://github.com/annkee/2017/04/01/webservice/</id>
    <published>2017-03-31T16:00:00.000Z</published>
    <updated>2019-07-08T10:38:45.716Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/webservice.jpg" alt="webservice" style="width: 100%"><br><a id="more"></a></p><h1 id="可能会用到的调用web-service的客户端代码"><a href="#可能会用到的调用web-service的客户端代码" class="headerlink" title="可能会用到的调用web service的客户端代码"></a>可能会用到的调用web service的客户端代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">        JaxWsProxyFactoryBean proxyFactoryBean=new JaxWsProxyFactoryBean();</span><br><span class="line">        //设置访问地址</span><br><span class="line">        proxyFactoryBean.setAddress(&quot;http://127.0.0.1:8089/user?wsdl&quot;);</span><br><span class="line">        //设置portType</span><br><span class="line">        proxyFactoryBean.setServiceClass(IUsersService.class);</span><br><span class="line">        //获取服务对象</span><br><span class="line">        IUsersService usersService= (IUsersService) proxyFactoryBean.create();</span><br><span class="line">        usersService.getAge(&quot;李白&quot;);</span><br><span class="line"></span><br><span class="line">        Client client = new Client(new URL(&quot;http://127.0.0.1:8089/user?wsdl&quot;));</span><br><span class="line">        Object[] results = client.invoke(&quot;getAge&quot;, new Object[] &#123; &quot;李白&quot; &#125;);</span><br><span class="line">        System.out.println(results[0]);*/</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        /*try &#123;</span><br><span class="line">            String endpoint = &quot;http://localhost:8088/weather&quot;; //直接引用远程的wsdl文件</span><br><span class="line">            Service service = new Service();</span><br><span class="line">            Call call = (Call) service.createCall();</span><br><span class="line">            call.setTargetEndpointAddress(endpoint);</span><br><span class="line">            //call.setOperationName(&quot;getName&quot;);//wsdl里面描述的接口名称</span><br><span class="line">            call.addParameter(&quot;userId&quot;, XMLType.XSD_DATE, ParameterMode.IN);//接口的参数</span><br><span class="line">            call.setReturnType(XMLType.XSD_STRING);//设置返回类型</span><br><span class="line">            call.invoke(&quot;getName&quot;,new Object[]&#123;10001&#125;);//给方法传递参数，并且调用方法</span><br><span class="line">           // System.out.println(&quot;result is &quot; + result);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  /*      JaxWsDynamicClientFactory dcf = JaxWsDynamicClientFactory.newInstance();</span><br><span class="line">        Client client = dcf.createClient(&quot;http://192.168.122.71:8000/services/resourceService?wsdl&quot;);</span><br><span class="line">        Object[] objects = new Object[0];</span><br><span class="line">        String param=&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;soap:Envelope xmlns:soap=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot; xmlns:soapenc=\&quot;http://schemas.xmlsoap.org/soap/encoding/\&quot; xmlns:tns=\&quot;http://serv.services.rs.idc.regaltec.com\&quot; xmlns:types=\&quot;http://serv.services.rs.idc.regaltec.com/encodedTypes\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; xmlns:xsd=\&quot;http://www.w3.org/2001/XMLSchema\&quot;&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;soap:Body soap:encodingStyle=\&quot;http://schemas.xmlsoap.org/soap/encoding/\&quot;&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;tns:queryRoom&gt;\n&quot; +</span><br><span class="line">                &quot;      &lt;inputXml xsi:type=\&quot;xsd:string\&quot;&gt;&amp;lt;idcCenterCode&amp;gt;Mega_IDC_4&amp;lt;/idcCenterCode&amp;gt;&lt;/inputXml&gt;\n&quot; +</span><br><span class="line">                &quot;    &lt;/tns:queryRoom&gt;\n&quot; +</span><br><span class="line">                &quot;  &lt;/soap:Body&gt;\n&quot; +</span><br><span class="line">                &quot;&lt;/soap:Envelope&gt;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            objects = client.invoke(&quot;queryRoom&quot;,  param);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">//输出调用结果</span><br><span class="line">        System.out.println(objects[0].getClass());</span><br><span class="line">        System.out.println(objects[0].toString());</span><br><span class="line">    &#125;*/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/webservice.jpg&quot; alt=&quot;webservice&quot; style=&quot;width: 100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="webservice" scheme="https://github.com/annkee/categories/webservice/"/>
    
    
      <category term="webservice" scheme="https://github.com/annkee/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title>maven简介</title>
    <link href="https://github.com/annkee/2016/12/24/maven/"/>
    <id>https://github.com/annkee/2016/12/24/maven/</id>
    <published>2016-12-23T16:00:00.000Z</published>
    <updated>2019-07-08T10:38:01.967Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/maven.jpg" alt="maven" style="width: 100%"></p><a id="more"></a><h1 id="maven-pom文件配置详解"><a href="#maven-pom文件配置详解" class="headerlink" title="maven pom文件配置详解"></a>maven pom文件配置详解</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;  </span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;  </span><br><span class="line">    &lt;parent&gt;  </span><br><span class="line">        &lt;artifactId&gt;docbuilder&lt;/artifactId&gt;  </span><br><span class="line">        &lt;groupId&gt;com.jiepu&lt;/groupId&gt;  </span><br><span class="line">        &lt;version&gt;1.0&lt;/version&gt;  </span><br><span class="line">    &lt;/parent&gt;  </span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;artifactId&gt;Core&lt;/artifactId&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;properties&gt;  </span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  </span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;  </span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;  </span><br><span class="line">    &lt;/properties&gt;  </span><br><span class="line">      </span><br><span class="line">  </span><br><span class="line">    &lt;dependencies&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;1.2.6&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;poi&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;3.12&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.freemarker&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;freemarker&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;2.3.23&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;sax&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;sax&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;2.0.1&lt;/version&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;!-- 本地lib引用，不用的就删除掉,demo而已--&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;groupId&gt;org.sqlite&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;sqlite-jdbc&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;3.7.2&lt;/version&gt;  </span><br><span class="line">            &lt;scope&gt;system&lt;/scope&gt;  </span><br><span class="line">            &lt;systemPath&gt;$&#123;project.basedir&#125;/lib/sqlite-jdbc-3.7.2.jar&lt;/systemPath&gt;  </span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">    &lt;/dependencies&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;build&gt;  </span><br><span class="line">        &lt;!-- 强制设置JDK编译版本为1.8 --&gt;  </span><br><span class="line">        &lt;plugins&gt;  </span><br><span class="line">            &lt;plugin&gt;  </span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  </span><br><span class="line">                &lt;configuration&gt;  </span><br><span class="line">                    &lt;source&gt;$&#123;java.version&#125;&lt;/source&gt;  </span><br><span class="line">                    &lt;target&gt;$&#123;java.version&#125;&lt;/target&gt;  </span><br><span class="line">                &lt;/configuration&gt;  </span><br><span class="line">            &lt;/plugin&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;/plugins&gt;  </span><br><span class="line">    &lt;/build&gt;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&lt;/project&gt;  </span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0 &quot;                     </span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance &quot;                  </span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd &quot;&gt;                 </span><br><span class="line">&lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。--&gt;               </span><br><span class="line">&lt;parent&gt;                   </span><br><span class="line">&lt;!--被继承的父项目的构件标识符--&gt;                   </span><br><span class="line">&lt;artifactId/&gt;                   </span><br><span class="line">&lt;!--被继承的父项目的全球唯一标识符--&gt;                   </span><br><span class="line">&lt;groupId/&gt;                   </span><br><span class="line">&lt;!--被继承的父项目的版本--&gt;                   </span><br><span class="line">&lt;version/&gt;                   </span><br><span class="line">&lt;!--父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。--&gt;                   </span><br><span class="line">&lt;relativePath/&gt;                   </span><br><span class="line">&lt;/parent&gt;                   </span><br><span class="line">&lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。--&gt;                   </span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;                   </span><br><span class="line">&lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app--&gt;                  </span><br><span class="line">&lt;groupId&gt;asia.banseon&lt;/groupId&gt;                   </span><br><span class="line">&lt;!--构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源码，二进制发布和WARs等。--&gt;               </span><br><span class="line">&lt;artifactId&gt;banseon-maven2&lt;/artifactId&gt;                   </span><br><span class="line">&lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型--&gt;                   </span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;                   </span><br><span class="line">&lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号--&gt;                   </span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;                   </span><br><span class="line">&lt;!--项目的名称, Maven产生的文档用--&gt;                  </span><br><span class="line">&lt;name&gt;banseon-maven&lt;/name&gt;                   </span><br><span class="line">&lt;!--项目主页的URL, Maven产生的文档用--&gt;                  </span><br><span class="line">&lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt;                   </span><br><span class="line">&lt;!--项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。--&gt;               </span><br><span class="line">&lt;description&gt;A maven project to study maven.&lt;/description&gt;              </span><br><span class="line">&lt;!--描述了这个项目构建环境中的前提条件。--&gt;                   </span><br><span class="line">&lt;prerequisites&gt;                   </span><br><span class="line">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本--&gt;                   </span><br><span class="line">&lt;maven/&gt;                   </span><br><span class="line">&lt;/prerequisites&gt;                   </span><br><span class="line">&lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira--&gt;                </span><br><span class="line">&lt;issueManagement&gt;                   </span><br><span class="line">&lt;!--问题管理系统（例如jira）的名字，--&gt;                   </span><br><span class="line">&lt;system&gt;jira&lt;/system&gt;                   </span><br><span class="line">&lt;!--该项目使用的问题管理系统的URL--&gt;                   </span><br><span class="line">&lt;url&gt;http://jira.baidu.com/banseon&lt;/url&gt;                   </span><br><span class="line">&lt;/issueManagement&gt;                   </span><br><span class="line">&lt;!--项目持续集成信息--&gt;                   </span><br><span class="line">&lt;ciManagement&gt;                   </span><br><span class="line">&lt;!--持续集成系统的名字，例如continuum--&gt;                   </span><br><span class="line">&lt;system/&gt;                   </span><br><span class="line">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。--&gt;                   </span><br><span class="line">&lt;url/&gt;                   </span><br><span class="line">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）--&gt;                   </span><br><span class="line">&lt;notifiers&gt;                   </span><br><span class="line">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者--&gt;                   </span><br><span class="line">&lt;notifier&gt;                   </span><br><span class="line">&lt;!--传送通知的途径--&gt;                   </span><br><span class="line">&lt;type/&gt;                   </span><br><span class="line">&lt;!--发生错误时是否通知--&gt;                   </span><br><span class="line">&lt;sendOnError/&gt;                   </span><br><span class="line">&lt;!--构建失败时是否通知--&gt;                   </span><br><span class="line">&lt;sendOnFailure/&gt;                   </span><br><span class="line">&lt;!--构建成功时是否通知--&gt;                   </span><br><span class="line">&lt;sendOnSuccess/&gt;                   </span><br><span class="line">&lt;!--发生警告时是否通知--&gt;                   </span><br><span class="line">&lt;sendOnWarning/&gt;                   </span><br><span class="line">&lt;!--不赞成使用。通知发送到哪里--&gt;                   </span><br><span class="line">&lt;address/&gt;                   </span><br><span class="line">&lt;!--扩展配置项--&gt;                   </span><br><span class="line">&lt;configuration/&gt;                   </span><br><span class="line">&lt;/notifier&gt;                   </span><br><span class="line">&lt;/notifiers&gt;                   </span><br><span class="line">&lt;/ciManagement&gt;                   </span><br><span class="line">&lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。--&gt;                   </span><br><span class="line">&lt;inceptionYear/&gt;                   </span><br><span class="line">&lt;!--项目相关邮件列表信息--&gt;                   </span><br><span class="line">&lt;mailingLists&gt;                   </span><br><span class="line">&lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。--&gt;                   </span><br><span class="line">&lt;mailingList&gt;                   </span><br><span class="line">&lt;!--邮件的名称--&gt;                   </span><br><span class="line">&lt;name&gt;Demo&lt;/name&gt;                   </span><br><span class="line">&lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建--&gt;                  </span><br><span class="line">&lt;post&gt;banseon@126.com&lt;/post&gt;                   </span><br><span class="line">&lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建--&gt;                  </span><br><span class="line">&lt;subscribe&gt;banseon@126.com&lt;/subscribe&gt;                   </span><br><span class="line">&lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建--&gt;                  </span><br><span class="line">&lt;unsubscribe&gt;banseon@126.com&lt;/unsubscribe&gt;                   </span><br><span class="line">&lt;!--你可以浏览邮件信息的URL--&gt;                   </span><br><span class="line">&lt;archive&gt;http:/hi.baidu.com/banseon/demo/dev/&lt;/archive&gt;                   </span><br><span class="line">&lt;/mailingList&gt;                   </span><br><span class="line">&lt;/mailingLists&gt;                   </span><br><span class="line">&lt;!--项目开发者列表--&gt;                   </span><br><span class="line">&lt;developers&gt;                   </span><br><span class="line">&lt;!--某个项目开发者的信息--&gt;                   </span><br><span class="line">&lt;developer&gt;                   </span><br><span class="line">&lt;!--SCM里项目开发者的唯一标识符--&gt;                   </span><br><span class="line">&lt;id&gt;HELLO WORLD&lt;/id&gt;                  </span><br><span class="line">&lt;!--项目开发者的全名--&gt;                   </span><br><span class="line">&lt;name&gt;banseon&lt;/name&gt;                   </span><br><span class="line">&lt;!--项目开发者的email--&gt;                   </span><br><span class="line">&lt;email&gt;banseon@126.com&lt;/email&gt;                   </span><br><span class="line">&lt;!--项目开发者的主页的URL--&gt;                   </span><br><span class="line">&lt;url/&gt;                   </span><br><span class="line">&lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色--&gt;                   </span><br><span class="line">&lt;roles&gt;                   </span><br><span class="line">&lt;role&gt;Project Manager&lt;/role&gt;                  </span><br><span class="line">&lt;role&gt;Architect&lt;/role&gt;                   </span><br><span class="line">&lt;/roles&gt;                   </span><br><span class="line">&lt;!--项目开发者所属组织--&gt;                   </span><br><span class="line">&lt;organization&gt;demo&lt;/organization&gt;                   </span><br><span class="line">&lt;!--项目开发者所属组织的URL--&gt;                   </span><br><span class="line">&lt;organizationUrl&gt;http://hi.baidu.com/banseon&lt;/organizationUrl&gt;                   </span><br><span class="line">&lt;!--项目开发者属性，如即时消息如何处理等--&gt;                   </span><br><span class="line">&lt;properties&gt;                   </span><br><span class="line">&lt;dept&gt;No&lt;/dept&gt;                   </span><br><span class="line">&lt;/properties&gt;                   </span><br><span class="line">&lt;!--项目开发者所在时区， -11到12范围内的整数。--&gt;                  </span><br><span class="line">&lt;timezone&gt;-5&lt;/timezone&gt;                   </span><br><span class="line">&lt;/developer&gt;                   </span><br><span class="line">&lt;/developers&gt;                   </span><br><span class="line">&lt;!--项目的其他贡献者列表--&gt;                   </span><br><span class="line">&lt;contributors&gt;                   </span><br><span class="line">&lt;!--项目的其他贡献者。参见developers/developer元素--&gt;                   </span><br><span class="line">&lt;contributor&gt;                   </span><br><span class="line">&lt;name/&gt;&lt;email/&gt;&lt;url/&gt;&lt;organization/&gt;&lt;organizationUrl/&gt;&lt;roles/&gt;&lt;timezone/&gt;&lt;properties/&gt;                   </span><br><span class="line">&lt;/contributor&gt;                   </span><br><span class="line">&lt;/contributors&gt;                   </span><br><span class="line">&lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。--&gt;                 </span><br><span class="line">&lt;licenses&gt;                   </span><br><span class="line">&lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。--&gt;                   </span><br><span class="line">&lt;license&gt;                   </span><br><span class="line">&lt;!--license用于法律上的名称--&gt;                   </span><br><span class="line">&lt;name&gt;Apache 2&lt;/name&gt;                  </span><br><span class="line">&lt;!--官方的license正文页面的URL--&gt;                   </span><br><span class="line">&lt;url&gt;http://www.baidu.com/banseon/LICENSE-2.0.txt&lt;/url&gt;                   </span><br><span class="line">&lt;!--项目分发的主要方式：                   </span><br><span class="line">repo，可以从Maven库下载                   </span><br><span class="line">manual， 用户必须手动下载和安装依赖--&gt;                  </span><br><span class="line">&lt;distribution&gt;repo&lt;/distribution&gt;                   </span><br><span class="line">&lt;!--关于license的补充信息--&gt;                   </span><br><span class="line">&lt;comments&gt;A business-friendly OSS license&lt;/comments&gt;                </span><br><span class="line">&lt;/license&gt;                   </span><br><span class="line">&lt;/licenses&gt;                   </span><br><span class="line">&lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。--&gt;                </span><br><span class="line">&lt;scm&gt;                   </span><br><span class="line">&lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。--&gt;                   </span><br><span class="line">&lt;connection&gt;                   </span><br><span class="line">scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)                   </span><br><span class="line">&lt;/connection&gt;                   </span><br><span class="line">&lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读--&gt;                   </span><br><span class="line">&lt;developerConnection&gt;                   </span><br><span class="line">scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk                   </span><br><span class="line">&lt;/developerConnection&gt;                   </span><br><span class="line">&lt;!--当前代码的标签，在开发阶段默认为HEAD--&gt;                   </span><br><span class="line">&lt;tag/&gt;                   </span><br><span class="line">&lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。--&gt;                   </span><br><span class="line">&lt;url&gt;http://svn.baidu.com/banseon&lt;/url&gt;                   </span><br><span class="line">&lt;/scm&gt;                   </span><br><span class="line">&lt;!--描述项目所属组织的各种属性。Maven产生的文档用--&gt;                   </span><br><span class="line">&lt;organization&gt;                   </span><br><span class="line">&lt;!--组织的全名--&gt;                   </span><br><span class="line">&lt;name&gt;demo&lt;/name&gt;                   </span><br><span class="line">&lt;!--组织主页的URL--&gt;                   </span><br><span class="line">&lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt;                   </span><br><span class="line">&lt;/organization&gt;                   </span><br><span class="line">&lt;!--构建项目需要的信息--&gt;                   </span><br><span class="line">&lt;build&gt;                   </span><br><span class="line">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;                   </span><br><span class="line">&lt;sourceDirectory/&gt;                   </span><br><span class="line">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。--&gt;                  </span><br><span class="line">&lt;scriptSourceDirectory/&gt;                   </span><br><span class="line">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。--&gt;                   </span><br><span class="line">&lt;testSourceDirectory/&gt;                   </span><br><span class="line">&lt;!--被编译过的应用程序class文件存放的目录。--&gt;                   </span><br><span class="line">&lt;outputDirectory/&gt;                   </span><br><span class="line">&lt;!--被编译过的测试class文件存放的目录。--&gt;                   </span><br><span class="line">&lt;testOutputDirectory/&gt;                   </span><br><span class="line">&lt;!--使用来自该项目的一系列构建扩展--&gt;                   </span><br><span class="line">&lt;extensions&gt;                   </span><br><span class="line">&lt;!--描述使用到的构建扩展。--&gt;                   </span><br><span class="line">&lt;extension&gt;                   </span><br><span class="line">&lt;!--构建扩展的groupId--&gt;                   </span><br><span class="line">&lt;groupId/&gt;                   </span><br><span class="line">&lt;!--构建扩展的artifactId--&gt;                   </span><br><span class="line">&lt;artifactId/&gt;                   </span><br><span class="line">&lt;!--构建扩展的版本--&gt;                   </span><br><span class="line">&lt;version/&gt;                   </span><br><span class="line">&lt;/extension&gt;                   </span><br><span class="line">&lt;/extensions&gt;                   </span><br><span class="line">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值--&gt;                  </span><br><span class="line">&lt;defaultGoal/&gt;                   </span><br><span class="line">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。--&gt;                   </span><br><span class="line">&lt;resources&gt;                   </span><br><span class="line">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径--&gt;                   </span><br><span class="line">&lt;resource&gt;                   </span><br><span class="line">&lt;!--描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。--&gt;                   </span><br><span class="line">&lt;targetPath/&gt;                   </span><br><span class="line">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。--&gt;                   </span><br><span class="line">&lt;filtering/&gt;                   </span><br><span class="line">&lt;!--描述存放资源的目录，该路径相对POM路径--&gt;                   </span><br><span class="line">&lt;directory/&gt;                   </span><br><span class="line">&lt;!--包含的模式列表，例如**/*.xml.--&gt;                   </span><br><span class="line">&lt;includes/&gt;                   </span><br><span class="line">&lt;!--排除的模式列表，例如**/*.xml--&gt;                   </span><br><span class="line">&lt;excludes/&gt;                   </span><br><span class="line">&lt;/resource&gt;                   </span><br><span class="line">&lt;/resources&gt;                   </span><br><span class="line">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。--&gt;                   </span><br><span class="line">&lt;testResources&gt;                   </span><br><span class="line">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明--&gt;                   </span><br><span class="line">&lt;testResource&gt;                   </span><br><span class="line">&lt;targetPath/&gt;&lt;filtering/&gt;&lt;directory/&gt;&lt;includes/&gt;&lt;excludes/&gt;                   </span><br><span class="line">&lt;/testResource&gt;                   </span><br><span class="line">&lt;/testResources&gt;                   </span><br><span class="line">&lt;!--构建产生的所有文件存放的目录--&gt;                   </span><br><span class="line">&lt;directory/&gt;                   </span><br><span class="line">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。--&gt;                   </span><br><span class="line">&lt;finalName/&gt;                   </span><br><span class="line">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表--&gt;                   </span><br><span class="line">&lt;filters/&gt;                   </span><br><span class="line">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置--&gt;                   </span><br><span class="line">&lt;pluginManagement&gt;                   </span><br><span class="line">&lt;!--使用的插件列表 。--&gt;                  </span><br><span class="line">&lt;plugins&gt;                   </span><br><span class="line">&lt;!--plugin元素包含描述插件所需要的信息。--&gt;                   </span><br><span class="line">&lt;plugin&gt;                   </span><br><span class="line">&lt;!--插件在仓库里的group ID--&gt;                  </span><br><span class="line">&lt;groupId/&gt;                   </span><br><span class="line">&lt;!--插件在仓库里的artifact ID--&gt;                  </span><br><span class="line">&lt;artifactId/&gt;                   </span><br><span class="line">&lt;!--被使用的插件的版本（或版本范围）--&gt;                   </span><br><span class="line">&lt;version/&gt;                   </span><br><span class="line">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。--&gt;                   </span><br><span class="line">&lt;extensions/&gt;                   </span><br><span class="line">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。--&gt;                   </span><br><span class="line">&lt;executions&gt;                   </span><br><span class="line">&lt;!--execution元素包含了插件执行需要的信息--&gt;                   </span><br><span class="line">&lt;execution&gt;                   </span><br><span class="line">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标--&gt;                   </span><br><span class="line">&lt;id/&gt;                   </span><br><span class="line">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段--&gt;                   </span><br><span class="line">&lt;phase/&gt;                   </span><br><span class="line">&lt;!--配置的执行目标--&gt;                   </span><br><span class="line">&lt;goals/&gt;                   </span><br><span class="line">&lt;!--配置是否被传播到子POM--&gt;                   </span><br><span class="line">&lt;inherited/&gt;                   </span><br><span class="line">&lt;!--作为DOM对象的配置--&gt;                   </span><br><span class="line">&lt;configuration/&gt;                   </span><br><span class="line">&lt;/execution&gt;                   </span><br><span class="line">&lt;/executions&gt;                   </span><br><span class="line">&lt;!--项目引入插件所需要的额外依赖--&gt;                   </span><br><span class="line">&lt;dependencies&gt;                   </span><br><span class="line">&lt;!--参见dependencies/dependency元素--&gt;                   </span><br><span class="line">&lt;dependency&gt;                   </span><br><span class="line">&lt;/dependency&gt;                   </span><br><span class="line">&lt;/dependencies&gt;                   </span><br><span class="line">&lt;!--任何配置是否被传播到子项目--&gt;                   </span><br><span class="line">&lt;inherited/&gt;                   </span><br><span class="line">&lt;!--作为DOM对象的配置--&gt;                   </span><br><span class="line">&lt;configuration/&gt;                   </span><br><span class="line">&lt;/plugin&gt;                   </span><br><span class="line">&lt;/plugins&gt;                   </span><br><span class="line">&lt;/pluginManagement&gt;                   </span><br><span class="line">&lt;!--使用的插件列表--&gt;                   </span><br><span class="line">&lt;plugins&gt;                   </span><br><span class="line">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;                   </span><br><span class="line">&lt;plugin&gt;                   </span><br><span class="line">&lt;groupId/&gt;&lt;artifactId/&gt;&lt;version/&gt;&lt;extensions/&gt;                   </span><br><span class="line">&lt;executions&gt;                   </span><br><span class="line">&lt;execution&gt;                   </span><br><span class="line">&lt;id/&gt;&lt;phase/&gt;&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;                   </span><br><span class="line">&lt;/execution&gt;                   </span><br><span class="line">&lt;/executions&gt;                   </span><br><span class="line">&lt;dependencies&gt;                   </span><br><span class="line">&lt;!--参见dependencies/dependency元素--&gt;                   </span><br><span class="line">&lt;dependency&gt;                   </span><br><span class="line">&lt;/dependency&gt;                   </span><br><span class="line">&lt;/dependencies&gt;                   </span><br><span class="line">&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;                   </span><br><span class="line">&lt;/plugin&gt;                   </span><br><span class="line">&lt;/plugins&gt;                   </span><br><span class="line">&lt;/build&gt;                   </span><br><span class="line">&lt;!--在列的项目构建profile，如果被激活，会修改构建处理--&gt;                   </span><br><span class="line">&lt;profiles&gt;                   </span><br><span class="line">&lt;!--根据环境参数或命令行参数激活某个构建处理--&gt;                   </span><br><span class="line">&lt;profile&gt;                   </span><br><span class="line">&lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。--&gt;                   </span><br><span class="line">&lt;id/&gt;                   </span><br><span class="line">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它                   </span><br><span class="line">能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。--&gt;                   </span><br><span class="line">&lt;activation&gt;                   </span><br><span class="line">&lt;!--profile默认是否激活的标志--&gt;                   </span><br><span class="line">&lt;activeByDefault/&gt;                   </span><br><span class="line">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。--&gt;                   </span><br><span class="line">&lt;jdk/&gt;                   </span><br><span class="line">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。--&gt;                   </span><br><span class="line">&lt;os&gt;                   </span><br><span class="line">&lt;!--激活profile的操作系统的名字--&gt;                   </span><br><span class="line">&lt;name&gt;Windows XP&lt;/name&gt;                  </span><br><span class="line">&lt;!--激活profile的操作系统所属家族(如 &apos;windows&apos;)--&gt;                  </span><br><span class="line">&lt;family&gt;Windows&lt;/family&gt;                   </span><br><span class="line">&lt;!--激活profile的操作系统体系结构 --&gt;                  </span><br><span class="line">&lt;arch&gt;x86&lt;/arch&gt;                   </span><br><span class="line">&lt;!--激活profile的操作系统版本--&gt;                   </span><br><span class="line">&lt;version&gt;5.1.2600&lt;/version&gt;                   </span><br><span class="line">&lt;/os&gt;                   </span><br><span class="line">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值                   </span><br><span class="line">字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段--&gt;                   </span><br><span class="line">&lt;property&gt;                   </span><br><span class="line">&lt;!--激活profile的属性的名称--&gt;                   </span><br><span class="line">&lt;name&gt;mavenVersion&lt;/name&gt;                   </span><br><span class="line">&lt;!--激活profile的属性的值--&gt;                   </span><br><span class="line">&lt;value&gt;2.0.3&lt;/value&gt;                   </span><br><span class="line">&lt;/property&gt;                   </span><br><span class="line">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活                   </span><br><span class="line">profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。--&gt;                   </span><br><span class="line">&lt;file&gt;                   </span><br><span class="line">&lt;!--如果指定的文件存在，则激活profile。--&gt;                   </span><br><span class="line">&lt;exists&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/&lt;/exists&gt;                   </span><br><span class="line">&lt;!--如果指定的文件不存在，则激活profile。--&gt;                   </span><br><span class="line">&lt;missing&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/&lt;/missing&gt;                   </span><br><span class="line">&lt;/file&gt;                   </span><br><span class="line">&lt;/activation&gt;                   </span><br><span class="line">&lt;!--构建项目所需要的信息。参见build元素--&gt;                   </span><br><span class="line">&lt;build&gt;                   </span><br><span class="line">&lt;defaultGoal/&gt;                   </span><br><span class="line">&lt;resources&gt;                   </span><br><span class="line">&lt;resource&gt;                   </span><br><span class="line">&lt;targetPath/&gt;&lt;filtering/&gt;&lt;directory/&gt;&lt;includes/&gt;&lt;excludes/&gt;                   </span><br><span class="line">&lt;/resource&gt;                   </span><br><span class="line">&lt;/resources&gt;                   </span><br><span class="line">&lt;testResources&gt;                   </span><br><span class="line">&lt;testResource&gt;                   </span><br><span class="line">&lt;targetPath/&gt;&lt;filtering/&gt;&lt;directory/&gt;&lt;includes/&gt;&lt;excludes/&gt;                   </span><br><span class="line">&lt;/testResource&gt;                   </span><br><span class="line">&lt;/testResources&gt;                   </span><br><span class="line">&lt;directory/&gt;&lt;finalName/&gt;&lt;filters/&gt;                   </span><br><span class="line">&lt;pluginManagement&gt;                   </span><br><span class="line">&lt;plugins&gt;                   </span><br><span class="line">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;                   </span><br><span class="line">&lt;plugin&gt;                   </span><br><span class="line">&lt;groupId/&gt;&lt;artifactId/&gt;&lt;version/&gt;&lt;extensions/&gt;                   </span><br><span class="line">&lt;executions&gt;                   </span><br><span class="line">&lt;execution&gt;                   </span><br><span class="line">&lt;id/&gt;&lt;phase/&gt;&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;                   </span><br><span class="line">&lt;/execution&gt;                   </span><br><span class="line">&lt;/executions&gt;                   </span><br><span class="line">&lt;dependencies&gt;                   </span><br><span class="line">&lt;!--参见dependencies/dependency元素--&gt;                   </span><br><span class="line">&lt;dependency&gt;                   </span><br><span class="line">&lt;/dependency&gt;                   </span><br><span class="line">&lt;/dependencies&gt;                   </span><br><span class="line">&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;                   </span><br><span class="line">&lt;/plugin&gt;                   </span><br><span class="line">&lt;/plugins&gt;                   </span><br><span class="line">&lt;/pluginManagement&gt;                   </span><br><span class="line">&lt;plugins&gt;                   </span><br><span class="line">&lt;!--参见build/pluginManagement/plugins/plugin元素--&gt;                   </span><br><span class="line">&lt;plugin&gt;                   </span><br><span class="line">&lt;groupId/&gt;&lt;artifactId/&gt;&lt;version/&gt;&lt;extensions/&gt;                   </span><br><span class="line">&lt;executions&gt;                   </span><br><span class="line">&lt;execution&gt;                   </span><br><span class="line">&lt;id/&gt;&lt;phase/&gt;&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;                   </span><br><span class="line">&lt;/execution&gt;                   </span><br><span class="line">&lt;/executions&gt;                   </span><br><span class="line">&lt;dependencies&gt;                   </span><br><span class="line">&lt;!--参见dependencies/dependency元素--&gt;                   </span><br><span class="line">&lt;dependency&gt;                   </span><br><span class="line">&lt;/dependency&gt;                   </span><br><span class="line">&lt;/dependencies&gt;                   </span><br><span class="line">&lt;goals/&gt;&lt;inherited/&gt;&lt;configuration/&gt;                   </span><br><span class="line">&lt;/plugin&gt;                   </span><br><span class="line">&lt;/plugins&gt;                   </span><br><span class="line">&lt;/build&gt;                   </span><br><span class="line">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径--&gt;                  </span><br><span class="line">&lt;modules/&gt;                   </span><br><span class="line">&lt;!--发现依赖和扩展的远程仓库列表。--&gt;                   </span><br><span class="line">&lt;repositories&gt;                   </span><br><span class="line">&lt;!--参见repositories/repository元素--&gt;                   </span><br><span class="line">&lt;repository&gt;                   </span><br><span class="line">&lt;releases&gt;                   </span><br><span class="line">&lt;enabled/&gt;&lt;updatePolicy/&gt;&lt;checksumPolicy/&gt;                   </span><br><span class="line">&lt;/releases&gt;                   </span><br><span class="line">&lt;snapshots&gt;                   </span><br><span class="line">&lt;enabled/&gt;&lt;updatePolicy/&gt;&lt;checksumPolicy/&gt;                   </span><br><span class="line">&lt;/snapshots&gt;                   </span><br><span class="line">&lt;id/&gt;&lt;name/&gt;&lt;url/&gt;&lt;layout/&gt;                   </span><br><span class="line">&lt;/repository&gt;                   </span><br><span class="line">&lt;/repositories&gt;                   </span><br><span class="line">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表--&gt;                   </span><br><span class="line">&lt;pluginRepositories&gt;                   </span><br><span class="line">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素--&gt;                   </span><br><span class="line">&lt;pluginRepository&gt;                   </span><br><span class="line">&lt;releases&gt;                   </span><br><span class="line">&lt;enabled/&gt;&lt;updatePolicy/&gt;&lt;checksumPolicy/&gt;                   </span><br><span class="line">&lt;/releases&gt;                   </span><br><span class="line">&lt;snapshots&gt;                   </span><br><span class="line">&lt;enabled/&gt;&lt;updatePolicy/&gt;&lt;checksumPolicy/&gt;                   </span><br><span class="line">&lt;/snapshots&gt;                   </span><br><span class="line">&lt;id/&gt;&lt;name/&gt;&lt;url/&gt;&lt;layout/&gt;                   </span><br><span class="line">&lt;/pluginRepository&gt;                   </span><br><span class="line">&lt;/pluginRepositories&gt;                   </span><br><span class="line">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。--&gt;                  </span><br><span class="line">&lt;dependencies&gt;                   </span><br><span class="line">&lt;!--参见dependencies/dependency元素--&gt;                   </span><br><span class="line">&lt;dependency&gt;                   </span><br><span class="line">&lt;/dependency&gt;                   </span><br><span class="line">&lt;/dependencies&gt;                   </span><br><span class="line">&lt;!--不赞成使用. 现在Maven忽略该元素.--&gt;                  </span><br><span class="line">&lt;reports/&gt;                   </span><br><span class="line">&lt;!--该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素--&gt;                 </span><br><span class="line">&lt;reporting&gt;                   </span><br><span class="line">&lt;/reporting&gt;                   </span><br><span class="line">&lt;!--参见dependencyManagement元素--&gt;                   </span><br><span class="line">&lt;dependencyManagement&gt;                   </span><br><span class="line">&lt;dependencies&gt;                   </span><br><span class="line">&lt;!--参见dependencies/dependency元素--&gt;                   </span><br><span class="line">&lt;dependency&gt;                   </span><br><span class="line">&lt;/dependency&gt;                   </span><br><span class="line">&lt;/dependencies&gt;                   </span><br><span class="line">&lt;/dependencyManagement&gt;                   </span><br><span class="line">&lt;!--参见distributionManagement元素--&gt;                   </span><br><span class="line">&lt;distributionManagement&gt;                   </span><br><span class="line">&lt;/distributionManagement&gt;                   </span><br><span class="line">&lt;!--参见properties元素--&gt;                   </span><br><span class="line">&lt;properties/&gt;                   </span><br><span class="line">&lt;/profile&gt;                   </span><br><span class="line">&lt;/profiles&gt;                   </span><br><span class="line">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径--&gt;                  </span><br><span class="line">&lt;modules/&gt;                   </span><br><span class="line">&lt;!--发现依赖和扩展的远程仓库列表。--&gt;                   </span><br><span class="line">&lt;repositories&gt;                   </span><br><span class="line">&lt;!--包含需要连接到远程仓库的信息--&gt;                   </span><br><span class="line">&lt;repository&gt;                   </span><br><span class="line">&lt;!--如何处理远程仓库里发布版本的下载--&gt;                   </span><br><span class="line">&lt;releases&gt;                   </span><br><span class="line">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;                  </span><br><span class="line">&lt;enabled/&gt;                   </span><br><span class="line">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。--&gt;                   </span><br><span class="line">&lt;updatePolicy/&gt;                   </span><br><span class="line">&lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。--&gt;                   </span><br><span class="line">&lt;checksumPolicy/&gt;                   </span><br><span class="line">&lt;/releases&gt;                   </span><br><span class="line">&lt;!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素--&gt;                   </span><br><span class="line">&lt;snapshots&gt;                   </span><br><span class="line">&lt;enabled/&gt;&lt;updatePolicy/&gt;&lt;checksumPolicy/&gt;                   </span><br><span class="line">&lt;/snapshots&gt;                   </span><br><span class="line">&lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库--&gt;                   </span><br><span class="line">&lt;id&gt;banseon-repository-proxy&lt;/id&gt;                   </span><br><span class="line">&lt;!--远程仓库名称--&gt;                   </span><br><span class="line">&lt;name&gt;banseon-repository-proxy&lt;/name&gt;                   </span><br><span class="line">&lt;!--远程仓库URL，按protocol://hostname/path形式--&gt;                   </span><br><span class="line">&lt;url&gt;http://192.168.1.169:9999/repository/&lt;/url&gt;                   </span><br><span class="line">&lt;!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。--&gt;                 </span><br><span class="line">&lt;layout&gt;default&lt;/layout&gt;                   </span><br><span class="line">&lt;/repository&gt;                   </span><br><span class="line">&lt;/repositories&gt;                   </span><br><span class="line">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表--&gt;                   </span><br><span class="line">&lt;pluginRepositories&gt;                   </span><br><span class="line">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素--&gt;                   </span><br><span class="line">&lt;pluginRepository&gt;                   </span><br><span class="line">&lt;/pluginRepository&gt;                   </span><br><span class="line">&lt;/pluginRepositories&gt;                   </span><br><span class="line">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。--&gt;                  </span><br><span class="line">&lt;dependencies&gt;                   </span><br><span class="line">&lt;dependency&gt;                   </span><br><span class="line">&lt;!--依赖的group ID--&gt;                  </span><br><span class="line">&lt;groupId&gt;org.apache.maven&lt;/groupId&gt;                   </span><br><span class="line">&lt;!--依赖的artifact ID--&gt;                  </span><br><span class="line">&lt;artifactId&gt;maven-artifact&lt;/artifactId&gt;                   </span><br><span class="line">&lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。--&gt;                </span><br><span class="line">&lt;version&gt;3.8.1&lt;/version&gt;                   </span><br><span class="line">&lt;!--依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。--&gt;                  </span><br><span class="line">&lt;type&gt;jar&lt;/type&gt;                   </span><br><span class="line">&lt;!--依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。--&gt;                 </span><br><span class="line">&lt;classifier&gt;&lt;/classifier&gt;                   </span><br><span class="line">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。                   </span><br><span class="line">- compile ：默认范围，用于编译                 </span><br><span class="line">- provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath                  </span><br><span class="line">- runtime: 在执行时需要使用                 </span><br><span class="line">- test: 用于test任务时使用                 </span><br><span class="line">- system: 需要外在提供相应的元素。通过systemPath来取得                 </span><br><span class="line">- systemPath: 仅用于范围为system。提供相应的路径                 </span><br><span class="line">- optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用--&gt;                 </span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;                   </span><br><span class="line">&lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。--&gt;                   </span><br><span class="line">&lt;systemPath&gt;&lt;/systemPath&gt;                   </span><br><span class="line">&lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题--&gt;                  </span><br><span class="line">&lt;exclusions&gt;                   </span><br><span class="line">&lt;exclusion&gt;                   </span><br><span class="line">&lt;artifactId&gt;spring-core&lt;/artifactId&gt;                   </span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;                   </span><br><span class="line">&lt;/exclusion&gt;                   </span><br><span class="line">&lt;/exclusions&gt;                   </span><br><span class="line">&lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。--&gt;                   </span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;                   </span><br><span class="line">&lt;/dependency&gt;                   </span><br><span class="line">&lt;/dependencies&gt;                   </span><br><span class="line">&lt;!--不赞成使用. 现在Maven忽略该元素.--&gt;                  </span><br><span class="line">&lt;reports&gt;&lt;/reports&gt;                   </span><br><span class="line">&lt;!--该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。--&gt;                 </span><br><span class="line">&lt;reporting&gt;                   </span><br><span class="line">&lt;!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。--&gt;                   </span><br><span class="line">&lt;excludeDefaults/&gt;                   </span><br><span class="line">&lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。--&gt;                   </span><br><span class="line">&lt;outputDirectory/&gt;                   </span><br><span class="line">&lt;!--使用的报表插件和他们的配置。--&gt;                   </span><br><span class="line">&lt;plugins&gt;                   </span><br><span class="line">&lt;!--plugin元素包含描述报表插件需要的信息--&gt;                   </span><br><span class="line">&lt;plugin&gt;                   </span><br><span class="line">&lt;!--报表插件在仓库里的group ID--&gt;                  </span><br><span class="line">&lt;groupId/&gt;                   </span><br><span class="line">&lt;!--报表插件在仓库里的artifact ID--&gt;                  </span><br><span class="line">&lt;artifactId/&gt;                   </span><br><span class="line">&lt;!--被使用的报表插件的版本（或版本范围）--&gt;                   </span><br><span class="line">&lt;version/&gt;                   </span><br><span class="line">&lt;!--任何配置是否被传播到子项目--&gt;                   </span><br><span class="line">&lt;inherited/&gt;                   </span><br><span class="line">&lt;!--报表插件的配置--&gt;                   </span><br><span class="line">&lt;configuration/&gt;                   </span><br><span class="line">&lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标--&gt;                  </span><br><span class="line">&lt;reportSets&gt;                   </span><br><span class="line">&lt;!--表示报表的一个集合，以及产生该集合的配置--&gt;                   </span><br><span class="line">&lt;reportSet&gt;                   </span><br><span class="line">&lt;!--报表集合的唯一标识符，POM继承时用到--&gt;                   </span><br><span class="line">&lt;id/&gt;                   </span><br><span class="line">&lt;!--产生报表集合时，被使用的报表的配置--&gt;                   </span><br><span class="line">&lt;configuration/&gt;                   </span><br><span class="line">&lt;!--配置是否被继承到子POMs--&gt;                   </span><br><span class="line">&lt;inherited/&gt;                   </span><br><span class="line">&lt;!--这个集合里使用到哪些报表--&gt;                   </span><br><span class="line">&lt;reports/&gt;                   </span><br><span class="line">&lt;/reportSet&gt;                   </span><br><span class="line">&lt;/reportSets&gt;                   </span><br><span class="line">&lt;/plugin&gt;                   </span><br><span class="line">&lt;/plugins&gt;                   </span><br><span class="line">&lt;/reporting&gt;                   </span><br><span class="line">&lt;!--继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。--&gt;             </span><br><span class="line">&lt;dependencyManagement&gt;                   </span><br><span class="line">&lt;dependencies&gt;                   </span><br><span class="line">&lt;!--参见dependencies/dependency元素--&gt;                   </span><br><span class="line">&lt;dependency&gt;                   </span><br><span class="line">&lt;/dependency&gt;                   </span><br><span class="line">&lt;/dependencies&gt;                   </span><br><span class="line">&lt;/dependencyManagement&gt;                   </span><br><span class="line">&lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。--&gt;                  </span><br><span class="line">&lt;distributionManagement&gt;                   </span><br><span class="line">&lt;!--部署项目产生的构件到远程仓库需要的信息--&gt;                   </span><br><span class="line">&lt;repository&gt;                   </span><br><span class="line">&lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素--&gt;                   </span><br><span class="line">&lt;uniqueVersion/&gt;                   </span><br><span class="line">&lt;id&gt;banseon-maven2&lt;/id&gt;                   </span><br><span class="line">&lt;name&gt;banseon maven2&lt;/name&gt;                  </span><br><span class="line">&lt;url&gt;file://$&#123;basedir&#125;/target/deploy&lt;/url&gt;                   </span><br><span class="line">&lt;layout/&gt;                   </span><br><span class="line">&lt;/repository&gt;                   </span><br><span class="line">&lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素--&gt;                   </span><br><span class="line">&lt;snapshotRepository&gt;                   </span><br><span class="line">&lt;uniqueVersion/&gt;                   </span><br><span class="line">&lt;id&gt;banseon-maven2&lt;/id&gt;                   </span><br><span class="line">&lt;name&gt;Banseon-maven2 Snapshot Repository&lt;/name&gt;                 </span><br><span class="line">&lt;url&gt;scp://svn.baidu.com/banseon:/usr/local/maven-snapshot&lt;/url&gt;                   </span><br><span class="line">&lt;layout/&gt;                   </span><br><span class="line">&lt;/snapshotRepository&gt;                   </span><br><span class="line">&lt;!--部署项目的网站需要的信息--&gt;                   </span><br><span class="line">&lt;site&gt;                   </span><br><span class="line">&lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置--&gt;                   </span><br><span class="line">&lt;id&gt;banseon-site&lt;/id&gt;                   </span><br><span class="line">&lt;!--部署位置的名称--&gt;                   </span><br><span class="line">&lt;name&gt;business api website&lt;/name&gt;                 </span><br><span class="line">&lt;!--部署位置的URL，按protocol://hostname/path形式--&gt;                   </span><br><span class="line">&lt;url&gt;                   </span><br><span class="line">scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web                   </span><br><span class="line">&lt;/url&gt;                   </span><br><span class="line">&lt;/site&gt;                   </span><br><span class="line">&lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。--&gt;                   </span><br><span class="line">&lt;downloadUrl/&gt;                   </span><br><span class="line">&lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。--&gt;                 </span><br><span class="line">&lt;relocation&gt;                   </span><br><span class="line">&lt;!--构件新的group ID--&gt;                  </span><br><span class="line">&lt;groupId/&gt;                   </span><br><span class="line">&lt;!--构件新的artifact ID--&gt;                  </span><br><span class="line">&lt;artifactId/&gt;                   </span><br><span class="line">&lt;!--构件新的版本号--&gt;                   </span><br><span class="line">&lt;version/&gt;                   </span><br><span class="line">&lt;!--显示给用户的，关于移动的额外信息，例如原因。--&gt;                   </span><br><span class="line">&lt;message/&gt;                   </span><br><span class="line">&lt;/relocation&gt;                   </span><br><span class="line">&lt;!--给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。--&gt;               </span><br><span class="line">&lt;status/&gt;                   </span><br><span class="line">&lt;/distributionManagement&gt;                   </span><br><span class="line">&lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。--&gt;                   </span><br><span class="line">&lt;properties/&gt;                   </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/maven.jpg&quot; alt=&quot;maven&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="https://github.com/annkee/categories/maven/"/>
    
    
      <category term="maven" scheme="https://github.com/annkee/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://github.com/annkee/2016/12/13/sorting-algorithm/"/>
    <id>https://github.com/annkee/2016/12/13/sorting-algorithm/</id>
    <published>2016-12-12T16:00:00.000Z</published>
    <updated>2019-07-08T10:38:26.393Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://blog.annkee.top/images/maopao.gif" alt="冒泡啊" style="width: 100%"></p><a id="more"></a><h1 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h1> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void BubbleSortArray() </span><br><span class="line"> &#123;</span><br><span class="line">     int i,j,temp;</span><br><span class="line">     for(i=1;i&lt;n;i++) </span><br><span class="line">     &#123; </span><br><span class="line">         for(j=0;j&lt;n-i;j++) </span><br><span class="line">         &#123; </span><br><span class="line">             if(a[j]&gt;a[j+1]) //比较交换相邻元素 </span><br><span class="line">             &#123; </span><br><span class="line">                 temp=a[j]; a[j]=a[j+1]; a[j+1]=temp; </span><br><span class="line">             &#125; </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序（Quicksort）是对冒泡排序的一种改进，它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br>时间复杂度为O(nlog2n)，适用于排序大列表。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">void swap(int a,int b)&#123;int t;t =a ;a =b ;b =t ;&#125;</span><br><span class="line"></span><br><span class="line">  int Partition(int [] arr,int low,int high) </span><br><span class="line">  &#123; </span><br><span class="line">      int pivot=arr[low]; //采用子序列的第一个元素作为枢纽元素 </span><br><span class="line">      while (low &lt; high) </span><br><span class="line">      &#123; </span><br><span class="line">  //从后往前在后半部分中寻找第一个小于枢纽元素的元素 </span><br><span class="line">  while (low &lt; high &amp;&amp; arr[high] &gt;= pivot) </span><br><span class="line">  &#123; </span><br><span class="line">     --high; </span><br><span class="line">  &#125; </span><br><span class="line">  swap(arr[low], arr[high]);//将这个比枢纽元素小的元素交换到前半部分</span><br><span class="line"></span><br><span class="line">  //从前往后在前半部分中寻找第一个大于枢纽元素的元素 </span><br><span class="line">  while (low &lt;high &amp;&amp;arr [low ]&lt;=pivot ) </span><br><span class="line">    &#123; </span><br><span class="line">              ++low ; </span><br><span class="line">  &#125; </span><br><span class="line">  swap (arr [low ],arr [high ]);//将这个枢纽元素大的元素交换到后半部分 </span><br><span class="line">      &#125; </span><br><span class="line">      return low ; //返回枢纽元素所在的位置 </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  void QuickSort(int [] a,int low,int high) </span><br><span class="line">  &#123; </span><br><span class="line">      if (low &lt;high ) </span><br><span class="line">      &#123; </span><br><span class="line">  int n=Partition (a ,low ,high ); </span><br><span class="line">  QuickSort (a ,low ,n ); </span><br><span class="line">  QuickSort (a ,n +1,high ); </span><br><span class="line">      &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList和Vector的区别-HashMap和Hashtable的区别以及线程安全的理解"><a href="#ArrayList和Vector的区别-HashMap和Hashtable的区别以及线程安全的理解" class="headerlink" title="ArrayList和Vector的区别,HashMap和Hashtable的区别以及线程安全的理解"></a>ArrayList和Vector的区别,HashMap和Hashtable的区别以及线程安全的理解</h2><h3 id="就ArrayList与Vector主要从二方面来说"><a href="#就ArrayList与Vector主要从二方面来说" class="headerlink" title="就ArrayList与Vector主要从二方面来说."></a>就ArrayList与Vector主要从二方面来说.</h3><ul><li>同步性:Vector是线程安全的，也就是说是同步的，而ArrayList是线程序不安全的，不是同步的 </li><li>数据增长:当需要增长时,Vector默认增长为原来一培，而ArrayList却是原来的一半</li></ul><h3 id="就HashMap与HashTable主要从三方面来说。"><a href="#就HashMap与HashTable主要从三方面来说。" class="headerlink" title="就HashMap与HashTable主要从三方面来说。"></a>就HashMap与HashTable主要从三方面来说。</h3><ul><li>历史原因:Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现 </li><li>同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的 </li><li>值：只有HashMap可以让你将空值作为一个表的条目的key或value</li></ul><h2 id="什么是线程安全？"><a href="#什么是线程安全？" class="headerlink" title="什么是线程安全？"></a>什么是线程安全？</h2><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。或者说:一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题。<br>举例<br>比如一个 ArrayList 类，在添加一个元素的时候，它可能会有两步来完成：</p><ul><li>在 Items[Size] 的位置存放此元素；</li><li>增大 Size 的值。</li></ul><p>在单线程运行的情况下，如果 Size = 0，添加一个元素后，此元素在位置 0，而且 Size=1；<br>而如果是在多线程情况下，比如有两个线程，线程 A 先将元素存放在位置 0。但是此时 CPU 调度线程A暂停，线程 B 得到运行的机会。线程B也向此 ArrayList 添加元素，因为此时 Size 仍然等于 0 （注意哦，我们假设的是添加一个元素是要两个步骤哦，而线程A仅仅完成了步骤1），所以线程B也将元素存放在位置0。然后线程A和线程B都继续运行，都增加 Size 的值。<br>那好，现在我们来看看 ArrayList 的情况，元素实际上只有一个，存放在位置 0，而 Size 却等于 2。这就是“线程不安全”了。</p><p>java中的native关键字<br>native修饰的拾非java语言代码接口，一般有实现体，不修饰abstract</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.annkee.top/images/maopao.gif&quot; alt=&quot;冒泡啊&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://github.com/annkee/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序算法" scheme="https://github.com/annkee/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
